#Generated by ResourceBundle Editor (http://essiembre.github.io/eclipse-rbe/)

teste30.exercicio1.ajuda.cabecalho  = Use access modifiers: private, protected, and public / Overload constructors and methods / Use package and import statements
teste30.exercicio1.ajuda.conteudo   = First Tip: A package enables you to create a namespace to group related classes and interfaces together.\r\n\r\nSecond Tip: A base class overloads its base class method, as required. Making derived classes overload their base class methods doesn\u2019t make it an incorrect or inefficient design.
teste30.exercicio1.enunExtra        = \ 
teste30.exercicio1.numOpcao         = Select 3 option
teste30.exercicio1.opcao_0          = A - Create related classes in a single package.
teste30.exercicio1.opcao_1          = B - Don\u2019t make derived classes overload methods from their base class.
teste30.exercicio1.opcao_2          = C - Expose the functionality of your classes using public methods.
teste30.exercicio1.opcao_3          = D - Create private methods to work as helper methods for the public methods.
teste30.exercicio1.opcao_4          = E - None of the above.
teste30.exercicio1.questao          = Which of the following points should you incorporate in your application design?
teste30.exercicio1.referencia       = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.01, p.85.
teste30.exercicio10.ajuda.cabecalho = Create a generic class
teste30.exercicio10.ajuda.conteudo  = Tip: A raw type doesn\u2019t include the generic information. For the generic type List<T>, its raw type is List. You don\u2019t need to define a raw type explicitly for any generic class or interface. You can access the raw type of all the generic types.
teste30.exercicio10.enunExtra       = \ 
teste30.exercicio10.numOpcao        = Select 2 option
teste30.exercicio10.opcao_0         = A - If you define a generic class, you must define its corresponding raw class explicitly.
teste30.exercicio10.opcao_1         = B - On compilation, type information is erased from a generic class.
teste30.exercicio10.opcao_2         = C - A generic method can be defined within a generic class or a regular class.
teste30.exercicio10.opcao_3         = D - Generic interfaces might not accept multiple generic type parameters.
teste30.exercicio10.opcao_4         = E - None of the above
teste30.exercicio10.questao         = Which of the following statements are true about generic classes, interfaces, and methods?
teste30.exercicio10.referencia      = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.02, p.338.
teste30.exercicio11.ajuda.cabecalho = Format strings using the formatting parameters: %b, %c, %d, %f, and %s in format strings
teste30.exercicio11.ajuda.conteudo  = By default, %f prints out six digits after the decimal number. It also rounds off the last digit. So num1=%f outputs 7.123457 and not 7.123456.\r\nBecause the double literal 8.12345678 is explicitly casted to an int value, num2 contains the integer part of the double literal 8.12345678, that is, 8. %2d sets the total width of the output to 2 digits, padded with spaces and right-aligned by default. It outputs a space preceding the digit 8.\r\nFor all non-Boolean primitive values, %b outputs true.
teste30.exercicio11.enunExtra       = \r\n\r\nclass Format1 {\r\n\u0009public static void main(String... args) {\r\n\u0009\u0009double num1 = 7.12345678;\r\n\u0009\u0009int num2 = (int) 8.12345678;\r\n\u0009\u0009System.out.printf("num1=%f, num2=%2d, %b", num1, num2, num2);\r\n\u0009}\r\n}
teste30.exercicio11.numOpcao        = Select 1 option
teste30.exercicio11.opcao_0         = A - num1=7.123456, num2= 8, true
teste30.exercicio11.opcao_1         = B - num1=7.123456, num2=8, true
teste30.exercicio11.opcao_2         = C - num1=7.123457, num2= 8, true
teste30.exercicio11.opcao_3         = D - Compilation error
teste30.exercicio11.opcao_4         = E - num1=7.1234, num2=8, false
teste30.exercicio11.questao         = What is the output of the following code ?
teste30.exercicio11.referencia      = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.01, p.387.
teste30.exercicio12.ajuda.cabecalho = Search, parse, and replace strings by using regular expressions, using expression patterns for matching limited to: . (dot), * (star), + (plus), ?, \\d, \\D, \\s, \\S, \\w, \\W, \\b, \\B, [], ()
teste30.exercicio12.ajuda.conteudo  = The last argument (5dogs-total846) is ignored when you use the following command line because a space precedes it.\r\n\r\njava -ea Regex1 \\d\\d 761cars8 5dogs-total846\r\n\r\nWhen you pass the regex by using the command-line arguments, you don\u2019t need to escape the backslashes. It\u2019s required only for literal string values.\r\n\\d\\d will match two adjacent digits in the literal 761cars8\u2014that is, 76. It won\u2019t match 61 because the digit 6 was already consumed in finding 76. By default, Java\u2019s regex engine won\u2019t use characters that have already been consumed.
teste30.exercicio12.enunExtra       = \r\n\r\nclass Regex1 {\r\n\u0009public static void main(String[] args) {\r\n\u0009\u0009Pattern pattern = Pattern.compile(args[0]);\r\n\u0009\u0009Matcher matcher = pattern.matcher(args[1]);\r\n\u0009\u0009boolean found = false;\r\n\u0009\u0009while (found = matcher.find()) {\r\n\u0009\u0009\u0009System.out.println(matcher.group());\r\n\u0009\u0009}\r\n\u0009}\r\n}
teste30.exercicio12.numOpcao        = Select 1 option
teste30.exercicio12.opcao_0         = A - 76  /  61
teste30.exercicio12.opcao_1         = B - 76  /  61  /  84  /  46
teste30.exercicio12.opcao_2         = C - 76  /  84
teste30.exercicio12.opcao_3         = D - No output
teste30.exercicio12.opcao_4         = E - None of the above
teste30.exercicio12.questao         = Given the following command line\r\n\r\njava Regex1 \\d\\d 761cars8 5dogs-total846\r\n\r\nwhat is the output of the following code?
teste30.exercicio12.referencia      = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.02, p.387.
teste30.exercicio13.ajuda.cabecalho = Format strings using the formatting parameters: %b, %c, %d, %f, and %s in format strings
teste30.exercicio13.ajuda.conteudo  = You\u2019ll get runtime exceptions if you use either of the following for a format specifier:\r\n\r\n   - An invalid data type\r\n   - An invalid combination of flags
teste30.exercicio13.enunExtra       = \r\n\r\nString eJava = "Guru";\r\nInteger start = 100;\r\nboolean win = true;\r\nFloat duration = new Float(-1099.9999);
teste30.exercicio13.numOpcao        = Select 2 option
teste30.exercicio13.opcao_0         = A - System.out.format("%d", eJava);
teste30.exercicio13.opcao_1         = B - System.out.printf("%s", start);
teste30.exercicio13.opcao_2         = C - System.out.printf("[%-12b]", win);
teste30.exercicio13.opcao_3         = D - System.out.format("%s12", eJava);
teste30.exercicio13.opcao_4         = E - System.out.format("%d", duration);
teste30.exercicio13.questao         = Given the following variables, which options will throw exceptions at runtime?
teste30.exercicio13.referencia      = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.03, p.388.
teste30.exercicio14.ajuda.cabecalho = Test invariants by using assertions
teste30.exercicio14.ajuda.conteudo  = Tip: For the longer form of the assert statement that uses two expressions, you can\u2019t enclose both expressions within a single parentheses.
teste30.exercicio14.enunExtra       = \ 
teste30.exercicio14.numOpcao        = Select 4 option
teste30.exercicio14.opcao_0         = A - assert(s == null : s = new String());
teste30.exercicio14.opcao_1         = B - assert s == null : s = new String();
teste30.exercicio14.opcao_2         = C - assert(s == null) : s = new String();
teste30.exercicio14.opcao_3         = D - assert(s.equals("assert"));
teste30.exercicio14.opcao_4         = E - assert s.equals("assert");
teste30.exercicio14.questao         = Given the following line of code\r\n\r\nString s = "assert";\r\n\r\nwhich of the following code options will compile successfully? (Choose all that apply.)
teste30.exercicio14.referencia      = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.02, p.448.
teste30.exercicio15.ajuda.cabecalho = Auto-close resources with a try-with-resources statement
teste30.exercicio15.ajuda.conteudo  = The constructor of class Box throws a RuntimeException, and so the box variable isn\u2019t initialized in the try-with-resources statement. Method close() of class Box isn\u2019t called implicitly because execution didn\u2019t proceed inside the try block. \r\nWhen try-with-resources throws an exception, the control is transferred to the catch block. In this case, the exception handler prints catch:java.lang.Runtime- Exception. The finally block always executes, thereafter printing finally.
teste30.exercicio15.enunExtra       = \r\n\r\nclass Box implements AutoCloseable {\r\n\u0009Box() {\r\n\u0009\u0009throw new RuntimeException();\r\n\u0009}\r\n\r\n\u0009public void close() throws Exception {\r\n\u0009\u0009System.out.println("close");\r\n\u0009\u0009throw new Exception();\r\n\u0009}\r\n}\r\n\r\nclass EJavaFactory {\r\n\u0009public static void main(String args[]) {\r\n\u0009\u0009try (Box box = new Box()) {\r\n\u0009\u0009\u0009box.close();\r\n\u0009\u0009} catch (Exception e) {\r\n\u0009\u0009\u0009System.out.println("catch:" + e);\r\n\u0009\u0009} finally {\r\n\u0009\u0009\u0009System.out.println("finally");\r\n\u0009\u0009}\r\n\u0009}\r\n}
teste30.exercicio15.numOpcao        = Select 1 option
teste30.exercicio15.opcao_0         = A - catch:java.lang.RuntimeException  /  close  /  finally
teste30.exercicio15.opcao_1         = B - catch:java.lang.RuntimeException  /  finally
teste30.exercicio15.opcao_2         = C - catch:java.lang.RuntimeException  /  close
teste30.exercicio15.opcao_3         = D - close  /  finally
teste30.exercicio15.opcao_4         = E - Compilation exception
teste30.exercicio15.questao         = What\u2019s the output of the following code?
teste30.exercicio15.referencia      = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.03, p.448.
teste30.exercicio16.ajuda.cabecalho = Use streams to read from and write to files by using classes in the java.io package including BufferedReader, BufferedWriter, File, FileReader, FileWriter, DataInput-Stream, DataOutputStream, ObjectOutputStream, ObjectInputStream, and PrintWriter
teste30.exercicio16.ajuda.conteudo  = dos.writeDouble(999.999) writes 8 bytes of data to the underlying stream, and dis.read() reads a single byte of data from the underlying stream, interprets it as an integer value, and outputs it. So the code neither prints 999.999 nor throws an EOFException.
teste30.exercicio16.enunExtra       = \ 
teste30.exercicio16.numOpcao        = Select 1 option
teste30.exercicio16.opcao_0         = A - 999.999  /  -1
teste30.exercicio16.opcao_1         = B - 999  /  999
teste30.exercicio16.opcao_2         = C - 999.999  /  EOFException
teste30.exercicio16.opcao_3         = D - Compilation error
teste30.exercicio16.opcao_4         = E - None of the above
teste30.exercicio16.questao         = What\u2019s the output of the following code?\r\n\r\n\r\nimport java.io.*;\r\n\r\nclass Q1 {\r\n\u0009public static void main(String args[]) throws IOException {\r\n\u0009\u0009DataOutputStream dos = new DataOutputStream(new FileOutputStream("contacts.txt"));\r\n\u0009\u0009dos.writeDouble(999.999);\r\n\u0009\u0009DataInputStream dis = new DataInputStream(new FileInputStream("contacts.txt"));\r\n\u0009\u0009System.out.println(dis.read());\r\n\u0009\u0009System.out.println(dis.read());\r\n\u0009\u0009dis.close();\r\n\u0009\u0009dos.close();\r\n\u0009}\r\n\r\n}
teste30.exercicio16.referencia      = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.01, p.504.
teste30.exercicio17.ajuda.cabecalho = Read and write data from the console
teste30.exercicio17.ajuda.conteudo  = Tip: A console isn\u2019t available to a JVM if it\u2019s started using another program or a background process, or if the underlying OS doesn\u2019t support it. In such cases, console.readLine throws a NullPointerException.
teste30.exercicio17.enunExtra       = \r\n\r\nimport java.io.*;\r\n\r\nclass ReadFromConsole {\r\n\u0009public static void main(String args[]) throws IOException {\r\n\u0009\u0009Console console = System.console();\r\n\u0009\u0009String name = "";\r\n\u0009\u0009while (name.trim().equals("")) {\r\n\u0009\u0009\u0009name = console.readLine("What is your name?\\n");\r\n\u0009\u0009\u0009console.printf(name);\r\n\u0009\u0009}\r\n    }\r\n}
teste30.exercicio17.numOpcao        = Select 3 option
teste30.exercicio17.opcao_0         = A - Class ReadFromConsole can be used to repeatedly prompt a user to enter a name, until the user doesn\u2019t enter a value.
teste30.exercicio17.opcao_1         = B - console.readLine prints the prompt What is your name? and waits for the user to enter a value.
teste30.exercicio17.opcao_2         = C - console.printf(name) prints the value, entered by the user, back to the console.
teste30.exercicio17.opcao_3         = D - Class ReadFromConsole can never throw a NullPointerException.
teste30.exercicio17.opcao_4         = E - None of the above
teste30.exercicio17.questao         = Which options are true for the following code?
teste30.exercicio17.referencia      = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.02, p.504.
teste30.exercicio18.ajuda.cabecalho = Use streams to read from and write to files by using classes in the java.io package including BufferedReader, BufferedWriter, File, FileReader, FileWriter, DataInput-Stream, DataOutputStream, ObjectOutputStream, ObjectInputStream, and PrintWriter
teste30.exercicio18.ajuda.conteudo  = First Tip: A PrintWriter can be used to write to a file, an OutputStream, and a Writer.\r\n\r\nSecond Tip: Some of the constructors of PrintWriter may throw I/O exceptions (for example, when a file couldn\u2019t be found). But none of the methods of PrintWriter throw an exception. You can use checkError() to verify if an error has occurred (for example, format conversion has failed).
teste30.exercicio18.enunExtra       = \ 
teste30.exercicio18.numOpcao        = Select 1 option
teste30.exercicio18.opcao_0         = A - PrintWriter can be used to write a String to the text file data.txt.
teste30.exercicio18.opcao_1         = B - PrintWriter can be used to write to FileOutputStream.
teste30.exercicio18.opcao_2         = C - PrintWriter\u2019s format and println methods can write a formatted string by using the specified format string and arguments.
teste30.exercicio18.opcao_3         = D - None of the methods or constructors of class PrintWriter throw I/O exceptions.
teste30.exercicio18.opcao_4         = E - None of the above
teste30.exercicio18.questao         = Select the incorrect statements.
teste30.exercicio18.referencia      = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.03, p.505.
teste30.exercicio19.ajuda.cabecalho = Operate on file and directory paths with the Path class
teste30.exercicio19.ajuda.conteudo  = Tip: The call path.resolveSibling("Q8_1.class") will resolve the path from file Q8_1.class against the parent directory of file Hello.txt.\r\nBecause these files exist in the same directory, a (valid) path to file Q8_1.class is returned. So Files.delete() will not delete file Hello.txt, but Q8_1.class instead.
teste30.exercicio19.enunExtra       = \r\n\r\nwhich options when inserted at /* INSERT CODE HERE */will delete the file represented by the Path object path?\r\n\r\nimport java.nio.file.*;\r\n\r\nclass Q8_1 {\r\n\u0009public static void main(String... args) throws Exception {\r\n\u0009\u0009Path path = Paths.get("Hello.txt");\r\n\u0009\u0009Files.delete(/* INSERT CODE HERE */);\r\n\u0009}\r\n}
teste30.exercicio19.numOpcao        = Select 2 option
teste30.exercicio19.opcao_0         = A - path.toAbsolutePath()
teste30.exercicio19.opcao_1         = B - path.resolveSibling("Q8_1.class")
teste30.exercicio19.opcao_2         = C - path.toRealPath()
teste30.exercicio19.opcao_3         = D - path.resolve()
teste30.exercicio19.opcao_4         = E - None of the above
teste30.exercicio19.questao         = Given the following directory structure\r\n\r\nroot dir\r\n|- MyDir\r\n   |- 8_1.java\r\n   |- 8_1.class\r\n   |- Hello.txt
teste30.exercicio19.referencia      = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.01, p.568.
teste30.exercicio2.ajuda.cabecalho  = Overload constructors and methods
teste30.exercicio2.ajuda.conteudo   = When a class is compiled, the contents of its initializer block are added to its constructor, just before its own contents. For example, here\u2019s the decompiled code for class Wood. As you can see, the contents of its initializer block are added to its constructor:\r\n\r\nclass Wood {\r\n  public Wood() {\r\n    System.out.println("Wood:init");\r\n    System.out.println("Wood");\r\n  }\r\n}
teste30.exercicio2.enunExtra        = \r\n\r\nclass Wood {\r\n\u0009public Wood() {\r\n\u0009\u0009System.out.println("Wood");\r\n\u0009}\r\n\r\n\u0009{\r\n\u0009\u0009System.out.println("Wood:init");\r\n\u0009}\r\n}\r\n\r\nclass Teak extends Wood {\r\n\u0009{\r\n\u0009\u0009System.out.println("Teak:init");\r\n\u0009}\r\n\r\n\u0009public Teak() {\r\n\u0009\u0009System.out.println("Teak");\r\n\u0009}\r\n\r\n\u0009public static void main(String args[]) {\r\n\u0009\u0009new Teak();\r\n\u0009}\r\n}
teste30.exercicio2.numOpcao         = Select 1 option
teste30.exercicio2.opcao_0          = A - Wood:init  /  Wood  /  Teak:init  /  Teak
teste30.exercicio2.opcao_1          = B - Wood  /  Wood:init  /  Teak:init  /  Teak
teste30.exercicio2.opcao_2          = C - Wood:init  /  Teak:init  /  Wood  /  Teak
teste30.exercicio2.opcao_3          = D - Wood  /  Wood:init  /  Teak  /  Teak:init
teste30.exercicio2.opcao_4          = E - Wood:init  /  Teak  /  Teak:init  /  Wood
teste30.exercicio2.questao          = What is the output of the following code?
teste30.exercicio2.referencia       = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.02, p.86.
teste30.exercicio20.ajuda.cabecalho = Operate on file and directory paths with the Path class
teste30.exercicio20.ajuda.conteudo  = The getRoot method returns the root of a path for an absolute path and null for a relative path. Because "/main/sub/notes/file.txt" starts with a /, it\u2019s considered an absolute path and getRoot will return / or \\ depending on your underlying OS (\\ for Windows and / for UNIX).\r\n\r\nMethod getName() excludes the root of a path and returns the element of this path, specified by the index parameter to this method. The element closest to the root in the directory hierarchy has an index of 0 and the element farthest from the root has an index of count-1 (where count is the total number of Path elements). Method subpath() (small p) returns the subsequence of the name elements of a Path, starting at the method parameter startIndex (inclusive) up to the name element at endIndex (exclusive).
teste30.exercicio20.enunExtra       = \ 
teste30.exercicio20.numOpcao        = Select 1 option
teste30.exercicio20.opcao_0         = A - \\main:null  /  file.txt:Hello.java  /  sub\\notes\\file.txt:code\\Hello.java
teste30.exercicio20.opcao_1         = B - \\:null  /  file.txt:Hello.java  /  sub\\notes:code
teste30.exercicio20.opcao_2         = C - main:code  /  file.txt:Hello.java  /  sub\\notes:code
teste30.exercicio20.opcao_3         = D - \\:null  /  main:code  /  sub\\notes:code
teste30.exercicio20.opcao_4         = E - Compilation fails
teste30.exercicio20.questao         = What is the output of the following code?\r\n\r\n\r\nclass Q8_2 {\r\n\u0009public static void main(String... args) {\r\n\u0009\u0009Path path1 = FileSystems.getDefault().getPath("/main/sub/notes/\r\n\u0009\u0009file.txt");\r\n\u0009\u0009Path path2 = Paths.get("code/Hello.java");\r\n\u0009\u0009System.out.println(path1.getRoot()+ ":" + path2.getRoot());\r\n\u0009\u0009System.out.println(path1.getName(0) + ":" + path2.getName(0));\r\n\u0009\u0009System.out.println(path1.subpath(1, 3) + ":" + path2.subpath(0,1));\r\n\u0009}\r\n}
teste30.exercicio20.referencia      = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.02, p.569.
teste30.exercicio21.ajuda.cabecalho = Create and use PreparedStatement and CallableStatement objects
teste30.exercicio21.ajuda.conteudo  = You can\u2019t use method executeUpdate() to execute a SQL SELECT query. If you do, you\u2019ll get a SQLException with a similar message:\r\n\r\njava.sql.SQLException: Can not issue executeUpdate() for SELECTs\r\n\r\nSimilarly, you can\u2019t execute data deletion and modification queries with method executeQuery(). If you do so, you\u2019ll get a SQLException:\r\n\r\njava.sql.SQLException: Can not issue data manipulation statements with executeQuery().
teste30.exercicio21.enunExtra       = \r\n\r\nclass PrepStatement {\r\n\u0009public static void main(String[] args) {\r\n\u0009\u0009try {\r\n\u0009\u0009\u0009String query = "....."; // line1\r\n\u0009\u0009\u0009Connection con = getConnection();\r\n\u0009\u0009\u0009PreparedStatement statement = con.prepareStatement(query);\r\n\u0009\u0009\u0009System.out.println(statement.executeUpdate());\r\n\u0009\u0009} catch (SQLException e) {\r\n\u0009\u0009\u0009System.out.println(e);\r\n\u0009\u0009}\r\n\u0009}\r\n}
teste30.exercicio21.numOpcao        = Select 3 option
teste30.exercicio21.opcao_0         = A - Line 1 defines a SQL SELECT statement that returned zero rows.
teste30.exercicio21.opcao_1         = B - Line 1 defines a SQL UPDATE statement that affected zero rows.
teste30.exercicio21.opcao_2         = C - Line 1 defines a SQL DELETE statement that affected zero rows.
teste30.exercicio21.opcao_3         = D - Line 1 defines a SQL CREATE TABLE statement, which would always return zero rows.
teste30.exercicio21.opcao_4         = E - Compilation fails
teste30.exercicio21.questao         = Given that method getConnection() returns a valid Connection object, the query variable defines a valid SQL statement, and class PrepStatement prints 0, select the options for the following code that can be correct individually:
teste30.exercicio21.referencia      = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.01, p.619.
teste30.exercicio22.ajuda.cabecalho = Describe the interfaces that make up the core of the JDBC API (including the Driver, Connection, Statement, and ResultSet interfaces and their relationship to provider implementations)
teste30.exercicio22.ajuda.conteudo  = One of the goals of JDBC 4.1, which is shipped with Java 7, is to be consistent with SQL:2003. JDBC 3.0 supported SQL99 features that were widely supported by the industry. JDBC 4.1 is supporting major components of SQL:2003.
teste30.exercicio22.enunExtra       = \ 
teste30.exercicio22.numOpcao        = Select 1 option
teste30.exercicio22.opcao_0         = A - SQL99
teste30.exercicio22.opcao_1         = B - SQL:2003
teste30.exercicio22.opcao_2         = C - SQL:2010
teste30.exercicio22.opcao_3         = D - SQL7
teste30.exercicio22.opcao_4         = E - None of the above
teste30.exercicio22.questao         = Which SQL standard is JDBC 4.1 (Java 7) consistent with?
teste30.exercicio22.referencia      = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.02, p.619.
teste30.exercicio23.ajuda.cabecalho = Create and use the Thread class and the Runnable interface
teste30.exercicio23.ajuda.conteudo  = Each thread instance oak and maple, when started, will output the values of enum Seasons\u2014that is, SPRING and SUMMER (always in this order). The order of the elements returned by Seasons.values() isn\u2019t random. The enum values are always returned in the order in which they are defined.\r\n\r\nYou can\u2019t guarantee whether thread oak completes or begins its execution before or after thread maple. The thread scheduler can start oak, make it print Oak-SPRING, run maple so that it prints Maple-SPRING, return the control to oak, or run maple to completion. Whatever the sequence, the happens-before contract guarantees that code in a thread executes in the order it\u2019s defined. So the thread oak or maple can never print the enum value SUMMER before the enum value SPRING.
teste30.exercicio23.enunExtra       = \ 
teste30.exercicio23.numOpcao        = Select 4 option
teste30.exercicio23.opcao_0         = A - Oak-SPRING Maple-SPRING Oak-SUMMER Maple-SUMMER
teste30.exercicio23.opcao_1         = B - Maple-SPRING Oak-SPRING Oak-SUMMER Maple-SUMMER
teste30.exercicio23.opcao_2         = C - Oak-SUMMER Maple-SUMMER Oak-SPRING Maple-SPRING
teste30.exercicio23.opcao_3         = D - Oak-SPRING Oak-SUMMER Maple-SPRING Maple-SUMMER
teste30.exercicio23.opcao_4         = E - Maple-SPRING Maple-SUMMER Oak-SPRING Oak-SUMMER
teste30.exercicio23.questao         = What is the probable output of the following code?\r\n\r\n\r\nenum Seasons {\r\n\u0009SPRING, SUMMER\r\n}\r\n\r\nclass ETree extends Thread {\r\n\u0009String name;\r\n\r\n\u0009public ETree(String name) {\r\n\u0009\u0009this.name = name;\r\n\u0009}\r\n\r\n\u0009public void run() {\r\n\u0009\u0009for (Seasons season : Seasons.values())\r\n\u0009\u0009\u0009System.out.print(name + "-" + season + " ");\r\n\u0009}\r\n\r\n\u0009public static void main(String args[]) {\r\n\u0009\u0009ETree oak = new ETree("Oak");\r\n\u0009\u0009oak.start();\r\n\u0009\u0009ETree maple = new ETree("Maple");\r\n\u0009\u0009maple.start();\r\n\u0009}\r\n}
teste30.exercicio23.referencia      = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.01, p.671.
teste30.exercicio24.ajuda.cabecalho = Create and use the Thread class and the Runnable interface
teste30.exercicio24.ajuda.conteudo  = The following code creates an anonymous class that subclasses class Thread. Its instance is referred by bug, a reference variable of type Thread.\r\n\r\nThread bug = new Thread() {\r\n    public void run() {\r\n        System.out.print("check bugs");\r\n    }\r\n};\r\n\r\nThe variable reportQA refers to an anonymous class instance that overrides its method run(). So calling reportQA.run() executes the overridden method run() and prints check bugs only once.
teste30.exercicio24.enunExtra       = \ 
teste30.exercicio24.numOpcao        = Select 2 option
teste30.exercicio24.opcao_0         = A - Replacing reportQA.run() with reportQA.start() will generate the same output on the system\u2019s console.
teste30.exercicio24.opcao_1         = B - Code prints check bugs once. 
teste30.exercicio24.opcao_2         = C - Code prints check bugs in an infinite loop.
teste30.exercicio24.opcao_3         = D - Replacing reportQA.run() with reportQA.start() will throw a compilation exception.
teste30.exercicio24.opcao_4         = E - Code prints check bugs twice.
teste30.exercicio24.questao         = Examine the following code and select the correct options.
teste30.exercicio24.referencia      = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.02, p.671.
teste30.exercicio25.ajuda.cabecalho = Create and use the Thread class and the Runnable interface
teste30.exercicio25.ajuda.conteudo  = Class EPen implements the Runnable interface; it doesn\u2019t extend class Thread. So it doesn\u2019t have access to method start(). Calling start() at line 4 results in the compilation failure.
teste30.exercicio25.enunExtra       = \ 
teste30.exercicio25.numOpcao        = Select 1 option
teste30.exercicio25.opcao_0         = A - It prints eJava once.
teste30.exercicio25.opcao_1         = B - It prints eJava multiple times.
teste30.exercicio25.opcao_2         = C - Compilation error
teste30.exercicio25.opcao_3         = D - Runtime exception
teste30.exercicio25.opcao_4         = E - None of the above
teste30.exercicio25.questao         = What is the output of the following code?\r\n\r\n\r\n1. class EPen implements Runnable {\r\n2.     public void run() {\r\n3.         System.out.println("eJava");\r\n4.         start();\r\n5.     }\r\n6.     public static void main(String... args) {\r\n7.         new Thread(new EPen()).start();\r\n8.     }\r\n9. }
teste30.exercicio25.referencia      = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.03, p.671.
teste30.exercicio26.ajuda.cabecalho = Use collections from the java.util.concurrent package with a focus on the advantages over and differences from the traditional java.util collections
teste30.exercicio26.ajuda.conteudo  = Tip: ConcurrentList, ConcurrentArrayList and CopyOnReadWriteArrayListJava API doesn\u2019t define\r\nthese interfaces or classes.
teste30.exercicio26.enunExtra       = \ 
teste30.exercicio26.numOpcao        = Select 1 option
teste30.exercicio26.opcao_0         = A - ConcurrentList
teste30.exercicio26.opcao_1         = B - ConcurrentArrayList
teste30.exercicio26.opcao_2         = C - CopyOnReadWriteArrayList
teste30.exercicio26.opcao_3         = D - CopyOnReadArrayList
teste30.exercicio26.opcao_4         = E - CopyOnWriteArrayList
teste30.exercicio26.questao         = Which of the following options is a thread-safe variant of ArrayList?
teste30.exercicio26.referencia      = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.01, p.716.
teste30.exercicio27.ajuda.cabecalho = Use collections from the java.util.concurrent package with a focus on the advantages over and differences from the traditional java.util collections
teste30.exercicio27.ajuda.conteudo  = First Tip: If a collection changes (addition, deletion, or modification of elements) after you retrieved an iterator, it will throw a ConcurrentModificationException.\r\n\r\nSecond Tip: If a collection changes (elements are added, deleted, or modified) after the iterator is created, they don\u2019t throw any runtime exception. These iterators work with a clone of the collection rather than working with the collection itself.
teste30.exercicio27.enunExtra       = \r\n\r\nclass MyColors extends Thread {\r\n\u0009static private Map<Integer, String> map;\r\n\r\n\u0009MyColors() {\r\n\u0009\u0009// INSERT CODE HERE\r\n\u0009\u0009map.put(1, "red");\r\n\u0009\u0009map.put(2, "blue");\r\n\u0009\u0009map.put(3, "yellow");\r\n\u0009}\r\n\r\n\u0009public void iterate() {\r\n\u0009\u0009Iterator iter = map.keySet().iterator();\r\n\u0009\u0009while (iter.hasNext()) {\r\n\u0009\u0009\u0009Integer key = (Integer) iter.next();\r\n\u0009\u0009\u0009String val = (String) map.get(key);\r\n\u0009\u0009\u0009System.out.println(key + "-" + val);\r\n\u0009\u0009\u0009add(4, "green");\r\n\u0009\u0009}\r\n\u0009}\r\n\r\n\u0009public void add(Integer i, String v) {\r\n\u0009\u0009map.put(i, v);\r\n\u0009}\r\n\r\n\u0009public void run() {\r\n\u0009\u0009iterate();\r\n\u0009}\r\n}
teste30.exercicio27.numOpcao        = Select 1 option
teste30.exercicio27.opcao_0         = A - map = new HashMap<Integer, String>();
teste30.exercicio27.opcao_1         = B - map = new NoExceptionHashMap<Integer, String>();
teste30.exercicio27.opcao_2         = C - map = new ConcurrentMap<Integer, String>();
teste30.exercicio27.opcao_3         = D - map = new ConcurrentHashMap<Integer, String>();
teste30.exercicio27.opcao_4         = E - map = new CopyOnWriteHashMap<Integer, String>();
teste30.exercicio27.questao         = Which line of code, when inserted at //INSERT CODE HERE, will ensure that on execution, single or multiple MyColors instances won\u2019t throw a Concurrent-ModificationException at runtime?
teste30.exercicio27.referencia      = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.02, p.716.
teste30.exercicio28.ajuda.cabecalho = Use collections from the java.util.concurrent package with a focus on the advantages over and differences from the traditional java.util collections
teste30.exercicio28.ajuda.conteudo  = Methods put() and take() of the BlockingQueue interface specify inbuilt locking support to be provided by all the implementing classes to implement the producer\u2013consumer design pattern. LinkedBlockingQueue and ArrayBlockingQueue are concrete implementations of the BlockingQueue interface.
teste30.exercicio28.enunExtra       = \ 
teste30.exercicio28.numOpcao        = Select 2 option
teste30.exercicio28.opcao_0         = A - WaitNotifyQueue
teste30.exercicio28.opcao_1         = B - BlockingQueue
teste30.exercicio28.opcao_2         = C - LinkedBlockingQueue
teste30.exercicio28.opcao_3         = D - ArrayBlockingQueue
teste30.exercicio28.opcao_4         = E - ConcurrentBlockingQueue
teste30.exercicio28.questao         = Which of the following concurrent collection classes can you use to implement the producer\u2013consumer design pattern?
teste30.exercicio28.referencia      = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.03, p.713.
teste30.exercicio29.ajuda.cabecalho = Define a locale using language and country codes
teste30.exercicio29.ajuda.conteudo  = Tip: Class Locale defines the following constructors:\r\n\r\nLocale(String language)\r\nLocale(String language, String country)\r\nLocale(String language, String country, String variant)
teste30.exercicio29.enunExtra       = \ 
teste30.exercicio29.numOpcao        = Select 2 option
teste30.exercicio29.opcao_0         = A - Locale locale = new Locale();  /  locale.setLanguage("es");  /  locale.setCountry("ES");
teste30.exercicio29.opcao_1         = B - Locale locale = new Locale("es", "ES");
teste30.exercicio29.opcao_2         = C - Locale locale = new Locale("ES", "es");
teste30.exercicio29.opcao_3         = D - Locale locale = new Locale("es");
teste30.exercicio29.opcao_4         = E - None of the above
teste30.exercicio29.questao         = Given the language code for Spanish is es and the country code for Spain is ES, which of the following code options defines a Locale to work with the Spanish language?
teste30.exercicio29.referencia      = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.01, p.754.
teste30.exercicio3.ajuda.cabecalho  = Override methods / Overload constructors and methods
teste30.exercicio3.ajuda.conteudo   = Tip: Class Laptop correctly overloads the method start() by defining a different parameter list.
teste30.exercicio3.enunExtra        = \r\n\r\nclass Machine {\r\n   void start() throws Exception { System.out.println("start machine"); }\r\n}\r\nclass Laptop {\r\n   void start() { System.out.println("Start Laptop"); }\r\n   void start(int ms) { System.out.println("Start Laptop:"+ms); }\r\n}
teste30.exercicio3.numOpcao         = Select 1 option
teste30.exercicio3.opcao_0          = A - Class Laptop overloads method start().
teste30.exercicio3.opcao_1          = B - Class Laptop overrides method start().
teste30.exercicio3.opcao_2          = C - Class Machine overrides method start().
teste30.exercicio3.opcao_3          = D - Class Machine won\u2019t compile.
teste30.exercicio3.opcao_4          = E - Class Laptop won\u2019t compile.
teste30.exercicio3.questao          = Examine the following code and select the answer options that are correct individually.
teste30.exercicio3.referencia       = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.03, p.86.
teste30.exercicio30.ajuda.cabecalho = Read and set the locale by using the Locale object\r\nFormat dates, numbers, and currency values for localization with the Number-Format and DateFormat classes (including number format patterns)
teste30.exercicio30.ajuda.conteudo  = Tip: The output should be formatted according to Locale.UK or by using the exact pattern.
teste30.exercicio30.enunExtra       = \r\n\r\nDate today = new Date();\r\n//INSERT CODE HERE\r\nSystem.out.println(dateFmt.format(today));\r\nSystem.out.println(timeFmt.format(today));\r\n\r\nWhich of the following lines of code, when inserted at //INSERT CODE HERE, will output the date and time that coincides with the UK\u2019s Locale?\r\n\r\n21/01/09\r\n21:45:12
teste30.exercicio30.numOpcao        = Select 3 option
teste30.exercicio30.opcao_0         = A - Locale.setDefault(Locale.UK);  /  DateFormat dateFmt = DateFormat.getDateInstance (DateFormat.SHORT);\r\nDateFormat timeFmt = DateFormat.getTimeInstance (DateFormat.MEDIUM);
teste30.exercicio30.opcao_1         = B - DateFormat dateFmt = new SimpleDateFormat ("dd/MM/yy");  /  DateFormat timeFmt = new SimpleDateFormat ("HH:mm:ss");
teste30.exercicio30.opcao_2         = C - DateFormat dateFmt = DateFormat.getDateInstance (DateFormat.SHORT);\r\nDateFormat timeFmt = DateFormat.getTimeInstance (DateFormat.MEDIUM);
teste30.exercicio30.opcao_3         = D - DateFormat dateFmt = DateFormat.getDateInstance (DateFormat.SHORT, Locale.UK);\r\nDateFormat timeFmt = DateFormat.getTimeInstance (DateFormat.MEDIUM, Locale.UK);
teste30.exercicio30.opcao_4         = E - None of the above
teste30.exercicio30.questao         = Assume the following code executes on the following date and time:\r\n\r\nDate: 2009 Jan 21\r\nTime: 21:45:12
teste30.exercicio30.referencia      = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.02, p.774.
teste30.exercicio4.ajuda.cabecalho  = Use the static and final keywords / Use enumerated types
teste30.exercicio4.ajuda.conteudo   = The code compiles successfully. An enum can define and use multiple constructors. The declaration of enum constants must follow the opening brace of the enum declaration. It can\u2019t follow the definition of variables or methods.
teste30.exercicio4.enunExtra        = \r\n\r\nenum Keywords {\r\n\u0009ASSERT(1.4), // line1\r\n\u0009DO, IF, WHILE; // line2\r\n\u0009double version = 1.0; // line3\r\n\r\n\u0009Keywords() { // constructor 1\r\n\u0009\u0009this.version = 1.0; // constructor 1\r\n\u0009} // constructor 1\r\n\r\n\u0009Keywords(double version) { // constructor 2\r\n\u0009\u0009this.version = version; // constructor 2\r\n\u0009} // constructor 2\r\n\r\n\u0009public static void main(String args[]) {\r\n\u0009\u0009Keywords[] keywords = Keywords.values();\r\n\u0009\u0009for (Keywords val : keywords)\r\n\u0009\u0009\u0009System.out.println(val);\r\n\u0009}\r\n}
teste30.exercicio4.numOpcao         = Select 1 option
teste30.exercicio4.opcao_0          = A - The enum keywords won\u2019t compile due to code at (#1).
teste30.exercicio4.opcao_1          = B - The enum keywords won\u2019t compile due to code at either (#2) or (#3).
teste30.exercicio4.opcao_2          = C - If you swap the complete code at (#1) and (#2) with code at (#3), enum keywords will compile successfully.
teste30.exercicio4.opcao_3          = D - The enum keywords will fail to compile due to the declaration of multiple constructors.
teste30.exercicio4.opcao_4          = E - None of the above
teste30.exercicio4.questao          = Select the correct statement(s) based on the following code:
teste30.exercicio4.referencia       = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.01, p.159.
teste30.exercicio5.ajuda.cabecalho  = Identify when and how to apply abstract classes / Construct abstract Java classes and subclasses
teste30.exercicio5.ajuda.conteudo   = Tip: When a class extends another class or implements an interface, the methods in the derived class must be either valid overloaded or valid overridden methods.
teste30.exercicio5.enunExtra        = \r\n\r\nabstract class Foo {\r\n   abstract void run();\r\n}\r\n\r\nWhich of the classes correctly subclass Foo? (Choose all that apply.)
teste30.exercicio5.numOpcao         = Select 2 option
teste30.exercicio5.opcao_0          = A - class Me extends Foo { void run() {/* ... */} }
teste30.exercicio5.opcao_1          = B - abstract class You extends Foo { void run() {/* ... */ } }
teste30.exercicio5.opcao_2          = C - interface Run { void run(); }\r\nclass Her extends Foo implements Run { void run() {/* ... */} }
teste30.exercicio5.opcao_3          = D - abstract class His extends Foo { String run() {/* ... */} }
teste30.exercicio5.opcao_4          = E - abstract class His extends Foo { Integer run() {/* ... */} }
teste30.exercicio5.questao          = Consider the following definition of class Foo:
teste30.exercicio5.referencia       = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.02, p.160.
teste30.exercicio6.ajuda.cabecalho  = Use enumerated types
teste30.exercicio6.ajuda.conteudo   = Tip: ascendingValues(), naturalValues() and orderedValues() are nonexistent enum methods.
teste30.exercicio6.enunExtra        = \r\n\r\nBASKETBALL:CRICKET:TENNIS:SWIMMING:\r\n\r\nenum Sports {\r\n   TENNIS, CRICKET, BASKETBALL, SWIMMING;\r\n   public static void main(String args[]) {\r\n      // INSERT CODE HERE\r\n   }\r\n}
teste30.exercicio6.numOpcao         = Select 1 option
teste30.exercicio6.opcao_0          = A - for (Sports val:Sports.values()) System.out.print(val+":");
teste30.exercicio6.opcao_1          = B - for (Sports val:Sports.orderedValues()) System.out.print(val+":");
teste30.exercicio6.opcao_2          = C - for (Sports val:Sports.naturalValues()) System.out.print(val+":");
teste30.exercicio6.opcao_3          = D - for (Sports val:Sports.ascendingValues()) System.out.print(val+":");
teste30.exercicio6.opcao_4          = E - None of the above
teste30.exercicio6.questao          = Which lines of code, when inserted at //INSERT CODE HERE, will print the following:
teste30.exercicio6.referencia       = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.03, p.160.
teste30.exercicio7.ajuda.cabecalho  = Write code that declares, implements, and/or extends interfaces
teste30.exercicio7.ajuda.conteudo   = Class EJavaGuru defines an instance variable course. Interface Online also defines a variable with the same name\u2014course (which is implicitly static). Class EJavaGuru implements Online. Using EJavaGuru\u2019s instanceName.course will refer to its instance variable. Using Online.course will refer to the variable course from Online. Using EJavaGuru.course will result in a compilation error. Code on line n1 compiles successfully and prints OCA.\r\n\r\nBecause the variables defined in an interface are implicitly static and final, the variable duration can be accessed as EJavaGuru.duration. Code on line n2 compiles successfully and prints 2.\r\n\r\nHowever, a class can\u2019t define static and instance variables with the same name. The following class won\u2019t compile:\r\n\r\nclass EJavaGuru {\r\n   String course;\r\n   static String course;\r\n}
teste30.exercicio7.enunExtra        = \r\n\r\nclass EJavaGuru implements Online {\r\n\u0009String course = "OCA";\r\n\r\n\u0009public static void main(String args[]) {\r\n\u0009\u0009EJavaGuru ejg = new EJavaGuru();\r\n\u0009\u0009System.out.print(ejg.course); // n1\r\n\u0009\u0009System.out.print(EJavaGuru.duration); // n2\r\n\u0009}\r\n}
teste30.exercicio7.numOpcao         = Select 1 option
teste30.exercicio7.opcao_0          = A - Compilation fails at line n1.
teste30.exercicio7.opcao_1          = B - Compilation fails at line n2.
teste30.exercicio7.opcao_2          = C - Code throws a runtime exception.
teste30.exercicio7.opcao_3          = D - Code prints \u201COCA2\u201D.
teste30.exercicio7.opcao_4          = E - Code prints \u201COCP2\u201D.
teste30.exercicio7.questao          = What is the output? Choose the best answer.
teste30.exercicio7.referencia       = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.01, p.226.
teste30.exercicio8.ajuda.cabecalho  = Choose between interface inheritance and class inheritance
teste30.exercicio8.ajuda.conteudo   = First Tip: java.lang.Object is the base class of all classes in Java. Making class  java.lang.Object extend another class can be extremely risky. Adding a method with a particular signature can break code of some other class, if it has defined a method with the same name (defaultValue()) but a different signature that isn\u2019t compatible, forming invalid overloaded methods.\r\n\r\nSecond Tip: Creation of type SwitchArgument as an interface with method defaultValue() provides a convenient option for all existing classes that want to be passed as an argument to the switch statement. When the classes implement the interface SwitchArgument, they\u2019ll be responsible for implementing method defaultValue().
teste30.exercicio8.enunExtra        = \ 
teste30.exercicio8.numOpcao         = Select 1 option
teste30.exercicio8.opcao_0          = A - Define class SwitchArgument and make class java.lang.Object extend class SwitchArgument.
teste30.exercicio8.opcao_1          = B - Define method defaultValue in class java.lang.Object.
teste30.exercicio8.opcao_2          = C - Define interface SwitchArgument with no methods. The classes that need to be used in this switch statement \r\ncan implement interface SwitchArgument.
teste30.exercicio8.opcao_3          = D - Define interface SwitchArgument with method defaultValue(). The classes that need to be used in this switch statement \r\ncan implement interface Switch-Argument.
teste30.exercicio8.opcao_4          = E - None of the above
teste30.exercicio8.questao          = In the next Java version, designers are planning to create a new switch statement. This statement should be able to accept an object of type SwitchArgument and be able to call method  efaultValue() on it. Which of the following options describe feasible (workable) options?
teste30.exercicio8.referencia       = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.02, p.226.
teste30.exercicio9.ajuda.cabecalho  = Create a generic class
teste30.exercicio9.ajuda.conteudo   = Tip: Though Java recommends using single letters like T or V to specify the type, using the letters A and B is correct in option (a) as per the syntax.
teste30.exercicio9.enunExtra        = \ 
teste30.exercicio9.numOpcao         = Select 3 option
teste30.exercicio9.opcao_0          = A - class EJavaMap<A , B> {}
teste30.exercicio9.opcao_1          = B - class EJavaMap<A a, B b> {}
teste30.exercicio9.opcao_2          = C - class EJavaMap<Aa extends String, Bb extends Object> { void add(Aa a) {} void add(Bb a) {} }
teste30.exercicio9.opcao_3          = D - class EJavaMap<Aa, Bb> { void add(Aa a, Bb b) {} }
teste30.exercicio9.opcao_4          = E - None of the above
teste30.exercicio9.questao          = Which of the following options creates a generic class that can be passed multiple generic types? (Choose all that apply.)
teste30.exercicio9.referencia       = GUPTA, Mala. OCP Java SE 7 Programmer II Certification Guide - PREPARE FOR THE 1ZO-804 EXAM. 1.ed. EUA, q.01, p.338.

teste60.exercicio1.ajuda.cabecalho  = Java Class Designer - Primitives.
teste60.exercicio1.ajuda.conteudo   = Putting 0 before a number makes that number an octal number. A decimal equivalent of 012 (in octal) is 10. If you attempt an implicit conversion from float, long, or double types (as given in options b, c, and d respectively) to an integer, you will a get compiler error.
teste60.exercicio1.enunExtra        = \r\n\r\nWhich one of the following options provides the output of this program when executed?
teste60.exercicio1.numOpcao         = Select 1 option
teste60.exercicio1.opcao_0          = A - int i = 012;
teste60.exercicio1.opcao_1          = B - int i = 10.0f;
teste60.exercicio1.opcao_2          = C - int i = 10L;
teste60.exercicio1.opcao_3          = D - int i = 10.0;
teste60.exercicio1.opcao_4          = E - None of the Above.
teste60.exercicio1.questao          = Consider the following code snippet:\r\n\r\nif(i == 10.0)\r\n    System.out.println("true");\r\n\r\nWhich one of the following declarations of the variable i will compile without errors and print true when the program executes?
teste60.exercicio1.referencia       = GANESH, S G. SHARMA, Tushar. Oracle Certified Professional Java SE 7 Programmer Exams. 1.ed. EUA, q.01, p.513.
teste60.exercicio10.ajuda.cabecalho = Java Class Designer
teste60.exercicio10.ajuda.conteudo  = Number is an abstract class, hence you cannot instantiate it using new operator. Many classes including Integer, Float, and BigDecimal derive from the Number class.
teste60.exercicio10.enunExtra       = \ \r\n\r\nWhich one of the following options correctly describes the behavior of this program?
teste60.exercicio10.numOpcao        = Select 1 option
teste60.exercicio10.opcao_0         = A - Compiler error in line marked with comment NUM because Number cannot be instantiated.
teste60.exercicio10.opcao_1         = B - Compiler error in line marked with comment BIG because BigDecimal does not inherit from Number.
teste60.exercicio10.opcao_2         = C - When executed, this program prints the following: 0 1 2.0 3.
teste60.exercicio10.opcao_3         = D - When executed, this program prints the following: 0.0 1.0 2.0 3.0.
teste60.exercicio10.opcao_4         = E - None of the Above.
teste60.exercicio10.questao         = Consider the following program:\r\n\r\nimport java.math.BigDecimal;\r\n\r\nclass NumberTest {\r\n\u0009public static void main(String[] args) {\r\n\u0009\u0009Number[] numbers = new Number[4];\r\n\u0009\u0009numbers[0] = new Number(0); // NUM\r\n\u0009\u0009numbers[1] = new Integer(1);\r\n\u0009\u0009numbers[2] = new Float(2.0f);\r\n\u0009\u0009numbers[3] = new BigDecimal(3.0); // BIG\r\n\u0009\u0009for (Number num : numbers) {\r\n\u0009\u0009\u0009System.out.print(num + " ");\r\n\u0009\u0009}\r\n\u0009}\r\n\r\n\u0009}
teste60.exercicio10.referencia      = GANESH, S G. SHARMA, Tushar. Oracle Certified Professional Java SE 7 Programmer Exams. 1.ed. EUA, q.02, p.513.
teste60.exercicio11.ajuda.cabecalho = String and StringBuilder
teste60.exercicio11.ajuda.conteudo  = The method StringBuffer replace(int start, int end, String str) has the following behavior according to the Javadoc that explains the behavior of this code segment: \u201CReplaces the characters in a substring of this sequence with characters in the specified String. The substring begins at the specified start and extends to the character at index end - 1 or to the end of the sequence if no such character exists. First, the characters in the substring are removed and then the specified String is inserted at the start. (This sequence will be lengthened to accommodate the specified String if necessary.)\u201D
teste60.exercicio11.enunExtra       = \r\n\r\nWhich one of the following options correctly describes the behavior of this code segment?
teste60.exercicio11.numOpcao        = Select 1 option
teste60.exercicio11.opcao_0         = A - This code segment: This, that, etc, etcetera.!
teste60.exercicio11.opcao_1         = B - This code segment: This, that, etcetera!
teste60.exercicio11.opcao_2         = C - This code segment: This, that, etc.
teste60.exercicio11.opcao_3         = D - This program throws in an ArrayIndexOutOfBoundsException.
teste60.exercicio11.opcao_4         = E - This code segment: This, that, etcetera.!
teste60.exercicio11.questao         = Consider the following code segment:\r\n\r\nStringBuffer strBuffer = new StringBuffer("This, that, etc.!");\r\nSystem.out.println(strBuffer.replace(12, 15, "etcetera"));
teste60.exercicio11.referencia      = GANESH, S G. SHARMA, Tushar. Oracle Certified Professional Java SE 7 Programmer Exams. 1.ed. EUA, q.03, p.514.
teste60.exercicio12.ajuda.cabecalho = Exceptions in Java.
teste60.exercicio12.ajuda.conteudo  = The call new StringBuffer(10); creates a StringBuffer object with initial capacity to store 10 characters; this capacity would grow as you keep calling methods like append().\r\nAfter the calls to append \u201Chello\u201D and \u201Cworld ,\u201D the call to append null results in adding the string \u201Cnull\u201D to the string buffer (it doesn\u2019t result in a NullPointerException or InvalidArgumentException). With the append of \u201Cnull,\u201D the capacity of the string buffer has grown to 17 characters. So, the call strBuffer.insert(11, '!'); successfully inserts the character \u2018!\u2019 in the 11th position instead of resulting in an ArrayIndexOutOfBoundsException.
teste60.exercicio12.enunExtra       = \r\n\r\nWhich one of the following options correctly describes the behavior of this program?
teste60.exercicio12.numOpcao        = Select 1 option
teste60.exercicio12.opcao_0         = A - This program prints the following: hello world!
teste60.exercicio12.opcao_1         = B - This program prints the following: hello world! null
teste60.exercicio12.opcao_2         = C - This program throws a NullPointerException.
teste60.exercicio12.opcao_3         = D - This program throws an InvalidArgumentException.
teste60.exercicio12.opcao_4         = E - This program throws an ArrayIndexOutOfBoundsException.
teste60.exercicio12.questao         = Consider the following program:\r\n\r\nclass SBAppend {\r\n\u0009public static void main(String[] args) {\r\n\u0009\u0009Object nullObj = null;\r\n\u0009\u0009StringBuffer strBuffer = new StringBuffer(10);\r\n\u0009\u0009strBuffer.append("hello ");\r\n\u0009\u0009strBuffer.append("world ");\r\n\u0009\u0009strBuffer.append(nullObj);\r\n\u0009\u0009strBuffer.insert(11, '!');\r\n\u0009\u0009System.out.println(strBuffer);\r\n\u0009}\r\n}
teste60.exercicio12.referencia      = GANESH, S G. SHARMA, Tushar. Oracle Certified Professional Java SE 7 Programmer Exams. 1.ed. EUA, q.04, p.514.
teste60.exercicio13.ajuda.cabecalho = Exceptions in Java.
teste60.exercicio13.ajuda.conteudo  = Note that unboxing can take place in expressions when you use a wrapper type object in place of a primitive type value. In this case, in the condition check for the conditional operator (?: operator), a primitive boolean value is required, but a wrapper type object is provided. \r\nHence auto-unboxing occurs, with the reference pointing to null. As a result, this code segment results in throwing a NullPointerException.
teste60.exercicio13.enunExtra       = \r\n\r\nWhich one of the following options correctly describes the behavior of this code segment?
teste60.exercicio13.numOpcao        = Select 1 option
teste60.exercicio13.opcao_0         = A - This code will result in a compiler error since a reference type (of type Boolean) cannot be used as part of expression for condition check.
teste60.exercicio13.opcao_1         = B - This code will result in a throwing a NullPointerException.
teste60.exercicio13.opcao_2         = C - This code will print true in console.
teste60.exercicio13.opcao_3         = D - This code will print false in console.
teste60.exercicio13.opcao_4         = E - None of the Above.
teste60.exercicio13.questao         = Consider the following code segment:\r\n\r\nBoolean b = null;\r\nSystem.out.println(b ? true : false);
teste60.exercicio13.referencia      = GANESH, S G. SHARMA, Tushar. Oracle Certified Professional Java SE 7 Programmer Exams. 1.ed. EUA, q.05, p.514.
teste60.exercicio14.ajuda.cabecalho = Inheritance and Polimorphism
teste60.exercicio14.ajuda.conteudo  = Whenever a class gets instantiated, the constructor of its base classes (the constructor of the root of the hierarchy gets executed first) gets invoked before the constructor of the instantiated class.
teste60.exercicio14.enunExtra       = \ 
teste60.exercicio14.numOpcao        = Select 1 option
teste60.exercicio14.opcao_0         = A - Base  /  Derived  /  DeriDerived
teste60.exercicio14.opcao_1         = B - Derived  /  DeriDerived
teste60.exercicio14.opcao_2         = C - DeriDerived  /  Derived  /  Base
teste60.exercicio14.opcao_3         = D - DeriDerived  /  Derived
teste60.exercicio14.opcao_4         = E - None of the Above.
teste60.exercicio14.questao         = What will be the output of the following program?\r\n\r\nclass Base {\r\n\u0009public Base() {\r\n\u0009\u0009System.out.println("Base");\r\n\u0009}\r\n}\r\n\r\nclass Derived extends Base {\r\n\u0009public Derived() {\r\n\u0009\u0009System.out.println("Derived");\r\n\u0009}\r\n}\r\n\r\nclass DeriDerived extends Derived {\r\n\u0009public DeriDerived() {\r\n\u0009\u0009System.out.println("DeriDerived");\r\n\u0009}\r\n}\r\n\r\nclass Test {\r\n\u0009public static void main(String[] args) {\r\n\u0009\u0009Derived b = new DeriDerived();\r\n\u0009}\r\n}
teste60.exercicio14.referencia      = GANESH, S G. SHARMA, Tushar. Oracle Certified Professional Java SE 7 Programmer Exams. 1.ed. EUA, q.06, p.515.
teste60.exercicio15.ajuda.cabecalho = Access Modifiers
teste60.exercicio15.ajuda.conteudo  = Only public, abstract, and final modifiers are permitted for an outer class; using private, protected, or static will result in a compiler error.
teste60.exercicio15.enunExtra       = \ 
teste60.exercicio15.numOpcao        = Select 3 options
teste60.exercicio15.opcao_0         = A - public
teste60.exercicio15.opcao_1         = B - protected
teste60.exercicio15.opcao_2         = C - private
teste60.exercicio15.opcao_3         = D - abstract
teste60.exercicio15.opcao_4         = E - final
teste60.exercicio15.questao         = Consider the following code segment:\r\n\r\nMODIFIER class SomeClass { }\r\n\r\nWhich three of the following modifiers, when replaced instead of MODIFIER, will compile cleanly?
teste60.exercicio15.referencia      = GANESH, S G. SHARMA, Tushar. Oracle Certified Professional Java SE 7 Programmer Exams. 1.ed. EUA, q.07, p.516.
teste60.exercicio16.ajuda.cabecalho = Constructors - Super and This.
teste60.exercicio16.ajuda.conteudo  = Tip: You cannot refer to an instance field x while explicitly invoking a constructor using this keyword.
teste60.exercicio16.enunExtra       = \r\n\r\nWhich one of the following definitions of the Point constructor can be replaced without compiler errors in place of the comment DEFAULT_CTOR?
teste60.exercicio16.numOpcao        = Select 1 option
teste60.exercicio16.opcao_0         = A - public Point() { this(0, 0); super(); }
teste60.exercicio16.opcao_1         = B - public Point() { super(); this(0, 0); }
teste60.exercicio16.opcao_2         = C - private Point() { this(0, 0); }
teste60.exercicio16.opcao_3         = D - public Point() { this(); }
teste60.exercicio16.opcao_4         = E - public Point() { this(x, 0); }
teste60.exercicio16.questao         = Consider the following class definition:\r\n\r\nclass Point {\r\n\u0009private int x = 0, y;\r\n\r\n\u0009public Point(int x, int y) {\r\n\u0009\u0009this.x = x;\r\n\u0009\u0009this.y = y;\r\n\u0009}\r\n\u0009// DEFAULT_CTOR\r\n}
teste60.exercicio16.referencia      = GANESH, S G. SHARMA, Tushar. Oracle Certified Professional Java SE 7 Programmer Exams. 1.ed. EUA, q.08, p.516.
teste60.exercicio17.ajuda.cabecalho = Constructors
teste60.exercicio17.ajuda.conteudo  = If you remove Stmt-1, a call to super(s) will result in printing Base: Hello, and then constructor of the Derived class invocation will print Derived. \r\nSimilarly, removal of Stmt-2 will also produce the correct program. In fact, if you remove both these statements, you will also get a compilable program.
teste60.exercicio17.enunExtra       = \r\n\r\nSelect three correct options from the following list:
teste60.exercicio17.numOpcao        = Select 3 options
teste60.exercicio17.opcao_0         = A - Removing Stmt-1 will make the program compilable and it will print the following: Base Derived.
teste60.exercicio17.opcao_1         = B - Removing Stmt-1 will make the program compilable and it will print the following: Base: Hello Derived.
teste60.exercicio17.opcao_2         = C - Removing Stmt-2 will make the program compilable and it will print the following: Base Derived.
teste60.exercicio17.opcao_3         = D - Removing both Stmt-1 and Stmt-2 will make the program compilable and it will print the following: Base Derived.
teste60.exercicio17.opcao_4         = E - Removing both Stmt-1 and Stmt-2 will make the program compilable and it will print the following: Base: Hello Derived.
teste60.exercicio17.questao         = Consider the following program:\r\n\r\nclass Base {\r\n\u0009public Base() {\r\n\u0009\u0009System.out.print("Base ");\r\n\u0009}\r\n\r\n\u0009public Base(String s) {\r\n\u0009\u0009System.out.print("Base: " + s);\r\n\u0009}\r\n}\r\n\r\nclass Derived extends Base {\r\n\u0009public Derived(String s) {\r\n\u0009\u0009super(); // Stmt-1\r\n\u0009\u0009super(s); // Stmt-2\r\n\u0009\u0009System.out.print("Derived ");\r\n\u0009}\r\n}\r\n\r\nclass Test {\r\n\u0009public static void main(String[] args) {\r\n\u0009\u0009Base a = new Derived("Hello ");\r\n\u0009}\r\n}
teste60.exercicio17.referencia      = GANESH, S G. SHARMA, Tushar. Oracle Certified Professional Java SE 7 Programmer Exams. 1.ed. EUA, q.09, p.517.
teste60.exercicio18.ajuda.cabecalho = Static imports
teste60.exercicio18.ajuda.conteudo  = \ Tip: You can import an individual static member of a class or all its static members by using the import static statement.
teste60.exercicio18.enunExtra       = \ 
teste60.exercicio18.numOpcao        = Select 1 option
teste60.exercicio18.opcao_0         = A - static import abc.org.project.A;
teste60.exercicio18.opcao_1         = B - static import abc.org.project.A.MYCONST;
teste60.exercicio18.opcao_2         = C - import static abc.org.project.A;
teste60.exercicio18.opcao_3         = D - import static abc.org.project.A.MYCONST;
teste60.exercicio18.opcao_4         = E - None of the Above.
teste60.exercicio18.questao         = You want to use the static member MYCONST belonging to class A in abc.org.project package. Which one of the following statements shows the correct use of static import feature?
teste60.exercicio18.referencia      = GANESH, S G. SHARMA, Tushar. Oracle Certified Professional Java SE 7 Programmer Exams. 1.ed. EUA, q.10, p.517.
teste60.exercicio19.ajuda.cabecalho = Imports
teste60.exercicio19.ajuda.conteudo  = The member out is a static member in the System class; you can statically import it and call println method on it. Note that println is a non-static member. Also, the statement import static java.lang.System.out.*; will result in a compiler error since out is not a class (but a static member of type PrintStream).
teste60.exercicio19.enunExtra       = \ 
teste60.exercicio19.numOpcao        = Select 1 option
teste60.exercicio19.opcao_0         = A - import static java.lang.System.out.println; class StaticImport { public static void main(String []args) \r\n{ println("hello world"); } }
teste60.exercicio19.opcao_1         = B - import static java.lang.System.out; class StaticImport { public static void main(String []args) \r\n{ out.println("hello world"); } }
teste60.exercicio19.opcao_2         = C - import static java.lang.System.out.*; class StaticImport { public static void main(String []args) { out.println("hello world"); } }
teste60.exercicio19.opcao_3         = D - import static java.lang.System.out.*; class StaticImport { public static void main(String []args) { println("hello world"); } }
teste60.exercicio19.opcao_4         = E - None of the Above.
teste60.exercicio19.questao         = Which one of the following programs compiles without any errors and prints \u201Chello world\u201D in console?
teste60.exercicio19.referencia      = GANESH, S G. SHARMA, Tushar. Oracle Certified Professional Java SE 7 Programmer Exams. 1.ed. EUA, q.11, p.518.
teste60.exercicio2.ajuda.cabecalho  = Inheritance
teste60.exercicio2.ajuda.conteudo   = Statement #1 will result in a compiler error since the keyword protected is not allowed inside a method body.
teste60.exercicio2.enunExtra        = \ 
teste60.exercicio2.numOpcao         = Select 1 option
teste60.exercicio2.opcao_0          = A - The compiler will report an error at statement #1.
teste60.exercicio2.opcao_1          = B - The compiler will report an error at statement #2.
teste60.exercicio2.opcao_2          = C - The compiler will report errors at statement #3.
teste60.exercicio2.opcao_3          = D - The program will compile without any error.
teste60.exercicio2.opcao_4          = E - None of the Above.
teste60.exercicio2.questao          = Consider the following program and choose the right option from the given list:\r\n\r\nclass Base {\r\n\u0009public void test() {\r\n\u0009\u0009protected int a = 10; // #1\r\n\u0009}\r\n}\r\n\r\nclass Test extends Base { // #2\r\n\u0009public static void main(String[] args) {\r\n\u0009\u0009System.out.printf(null); // #3\r\n\u0009}\r\n}
teste60.exercicio2.referencia       = GANESH, S G. SHARMA, Tushar. Oracle Certified Professional Java SE 7 Programmer Exams. 1.ed. EUA, q.12, p.518.
teste60.exercicio20.ajuda.cabecalho = Inheritance and Casts.
teste60.exercicio20.ajuda.conteudo  = The dynamic type of variable obj is Base1 that you were trying to cast into Base2. This is not supported and so results in an exception.
teste60.exercicio20.enunExtra       = \ 
teste60.exercicio20.numOpcao        = Select 1 option
teste60.exercicio20.opcao_0         = A - The program will print the following: Base1.
teste60.exercicio20.opcao_1         = B - The program will print the following: Base2.
teste60.exercicio20.opcao_2         = C - The compiler will report an error in the line marked with comment CAST.
teste60.exercicio20.opcao_3         = D - The program will result in an exception (ClassCastException).
teste60.exercicio20.opcao_4         = E - None of the Above.
teste60.exercicio20.questao         = Consider the following program and choose the correct option from the list of options:\r\n\r\nclass Base {\r\n\u0009public void test() {\r\n\u0009}\r\n}\r\n\r\nclass Base1 extends Base {\r\n\u0009public void test() {\r\n\u0009\u0009System.out.println("Base1");\r\n\u0009}\r\n}\r\n\r\nclass Base2 extends Base {\r\n\u0009public void test() {\r\n\u0009\u0009System.out.println("Base2");\r\n\u0009}\r\n}\r\n\r\nclass Test {\r\n\u0009public static void main(String[] args) {\r\n\u0009\u0009Base obj = new Base1();\r\n\u0009\u0009((Base2) obj).test(); // CAST\r\n\u0009}\r\n}
teste60.exercicio20.referencia      = GANESH, S G. SHARMA, Tushar. Oracle Certified Professional Java SE 7 Programmer Exams. 1.ed. EUA, q.13, p.519.
teste60.exercicio21.ajuda.cabecalho = Inner classes
teste60.exercicio21.ajuda.conteudo  = An inner class can access even the private members of the outer class. Similarly, the private variable belonging to the inner class can be accessed in the outer class.
teste60.exercicio21.enunExtra       = \ \r\n\r\nWhich one of the following statements will you replace in place of // Stmt#1 to make the program compile and run successfully to print \u201CInner: print\u201D in console?
teste60.exercicio21.numOpcao        = Select 1 option
teste60.exercicio21.opcao_0         = A - Outer.Inner inner = new Outer.Inner();
teste60.exercicio21.opcao_1         = B - Inner inner = new Outer.Inner();
teste60.exercicio21.opcao_2         = C - Outer.Inner inner = new Outer().Inner();
teste60.exercicio21.opcao_3         = D - Outer.Inner inner = new Outer().new Inner();
teste60.exercicio21.opcao_4         = E - None of the Above.
teste60.exercicio21.questao         = Consider the following program:\r\n\r\nclass Outer {\r\n\u0009class Inner {\r\n\u0009\u0009public void print() {\r\n\u0009\u0009\u0009System.out.println("Inner: print");\r\n\u0009\u0009}\r\n\u0009}\r\n}\r\n\r\nclass Test {\r\n\u0009public static void main(String[] args) {\r\n\u0009\u0009// Stmt#1\r\n\u0009\u0009inner.print();\r\n\u0009}\r\n}
teste60.exercicio21.referencia      = GANESH, S G. SHARMA, Tushar. Oracle Certified Professional Java SE 7 Programmer Exams. 1.ed. EUA, q.14, p.519.
teste60.exercicio22.ajuda.cabecalho = Inner classes
teste60.exercicio22.ajuda.conteudo  = An inner class can access even the private members of the outer class. Similarly, the private variable belonging to the inner class can be accessed in the outer class.
teste60.exercicio22.enunExtra       = \r\n\r\nWhich one of the following options is correct?
teste60.exercicio22.numOpcao        = Select 1 option
teste60.exercicio22.opcao_0         = A - When compiled, this program will result in a compiler error in line marked with comment ACCESS1.
teste60.exercicio22.opcao_1         = B - When compiled, this program will result in a compiler error in line marked with comment ACCESS2.
teste60.exercicio22.opcao_2         = C - When executed, this program prints 10.
teste60.exercicio22.opcao_3         = D - When executed, this program prints 0.
teste60.exercicio22.opcao_4         = E - None of the Above.
teste60.exercicio22.questao         = Consider the following program:\r\n\r\npublic class Outer {\r\n\u0009private int mem = 10;\r\n\r\n\u0009class Inner {\r\n\u0009\u0009private int imem = new Outer().mem; // ACCESS1\r\n\u0009}\r\n\r\n\u0009public static void main(String[] s) {\r\n\u0009\u0009System.out.println(new Outer().new Inner().imem); // ACCESS2\r\n\u0009}\r\n}\r\n
teste60.exercicio22.referencia      = GANESH, S G. SHARMA, Tushar. Oracle Certified Professional Java SE 7 Programmer Exams. 1.ed. EUA, q.15, p.520.
teste60.exercicio23.ajuda.cabecalho = Interfaces and instanceof
teste60.exercicio23.ajuda.conteudo  = An enumeration can implement an interface (but cannot extend a class, or cannot be a base class).\r\nEach enumeration constant is an object of its enumeration type. An enumeration automatically extends the abstract class java.util.Enum. Hence, all the three instanceof checks succeed.
teste60.exercicio23.enunExtra       = \r\n\r\nWhich one of the following options is correct?
teste60.exercicio23.numOpcao        = Select 1 option
teste60.exercicio23.opcao_0         = A - This program results in a compiler in the line marked with comment IMPLEMENTS_INTERFACE.
teste60.exercicio23.opcao_1         = B - This program results in a compiler in the line marked with comment THIRD_CHECK.
teste60.exercicio23.opcao_2         = C - When executed, this program prints the following: yes, instance of AnEnum
teste60.exercicio23.opcao_3         = D - When executed, this program prints the following: yes, instance of AnEnum  /  yes, instance of EnumBase
teste60.exercicio23.opcao_4         = E - When executed, this program prints the following: yes, instance of AnEnum  /  yes, instance of EnumBase  /  yes, instance of Enum
teste60.exercicio23.questao         = Consider the following program:\r\n\r\ninterface EnumBase {\r\n}\r\n\r\nenum AnEnum implements EnumBase { // IMPLEMENTS_INTERFACE\r\n\u0009ONLY_MEM;\r\n}\r\n\r\nclass EnumCheck {\r\n\u0009public static void main(String[] args) {\r\n\u0009\u0009if (AnEnum.ONLY_MEM instanceof AnEnum) {\r\n\u0009\u0009\u0009System.out.println("yes, instance of AnEnum");\r\n\u0009\u0009}\r\n\u0009\u0009if (AnEnum.ONLY_MEM instanceof EnumBase) {\r\n\u0009\u0009\u0009System.out.println("yes, instance of EnumBase");\r\n\u0009\u0009}\r\n\u0009\u0009if (AnEnum.ONLY_MEM instanceof Enum) { // THIRD_CHECK\r\n\u0009\u0009\u0009System.out.println("yes, instance of Enum");\r\n\u0009\u0009}\r\n\u0009}\r\n}
teste60.exercicio23.referencia      = GANESH, S G. SHARMA, Tushar. Oracle Certified Professional Java SE 7 Programmer Exams. 1.ed. EUA, q.16, p.520.
teste60.exercicio24.ajuda.cabecalho = Enumerated types
teste60.exercicio24.ajuda.conteudo  = Think of the courses offered by a university or maybe even the roles within an organization: each defines a finite and predefined set of objects. These finite and predefined sets of objects can be defined as enumerated types, or enums. An enum defines a new custom data type (like interfaces and classes). Users are allowed to use only existing enum objects; they can\u2019t create new enum objects.
teste60.exercicio24.enunExtra       = \ 
teste60.exercicio24.numOpcao        = Select 3 options
teste60.exercicio24.opcao_0         = A - An enum can have private constructor.
teste60.exercicio24.opcao_1         = B - An enum can have public constructor.
teste60.exercicio24.opcao_2         = C - An enum can have public methods and fields.
teste60.exercicio24.opcao_3         = D - An enum can implement an interface.
teste60.exercicio24.opcao_4         = E - An enum can extend a class.
teste60.exercicio24.questao         = Which of the following statements are true with respect to enums? (Select all that apply.)
teste60.exercicio24.referencia      = GANESH, S G. SHARMA, Tushar. Oracle Certified Professional Java SE 7 Programmer Exams. 1.ed. EUA, q.17, p.521.
