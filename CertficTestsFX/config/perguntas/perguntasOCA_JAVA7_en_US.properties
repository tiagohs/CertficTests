###############################################################
## Oracle Certified Associate, Java SE 7 Programmer ###########
###############################################################

###############################################################
## TESTE DE 30 QUESTÕES - EXERCÍCIOS.
###############################################################

teste30.exercicio1.ajuda.cabecalho  = Using Operators and Decision Constructs.
teste30.exercicio1.ajuda.conteudo   = You should understand here that instanceof operator returns true even if the Right Hand Side is a super class.\r\nFor example,\r\n  class Animal {}\r\n  class Dog extends Animal { }\r\n  Dog d = new Dog();\r\n\r\nNow, d instanceof Animal will be true because even though d is actually an instance of Dog, since Dog is a subclass of Animal, Dog IS-A Animal.
teste30.exercicio1.enunExtra        = \ 
teste30.exercicio1.numOpcao         = Select 1 option
teste30.exercicio1.opcao_0          = A - For any non-null reference o1, the expression (o1 instanceof o1) will always yield true.
teste30.exercicio1.opcao_1          = B - For any non-null reference o1, the expression (o1 instanceof Object) will always yield true.
teste30.exercicio1.opcao_2          = C - For any non-null reference o1, the expression (o1 instanceof o1) will always yield false.
teste30.exercicio1.opcao_3          = D - For any non-null reference o1, the expression (o1 instanceof Object) may yield false.
teste30.exercicio1.opcao_4          = E - None of the above.
teste30.exercicio1.questao          = Which of the following statements are true? 
teste30.exercicio1.referencia       = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.01, p.72.
teste30.exercicio10.ajuda.cabecalho = Working with Java Data Types - String, StringBuilder
teste30.exercicio10.ajuda.conteudo  = Tip: There is no reverse() method in String class.
teste30.exercicio10.enunExtra       = \r\n\r\npublic class TestClass {\r\n\u0009public static void main(String args[]) {\r\n\u0009\u0009String s = "hello";\r\n\u0009\u0009StringBuilder sb = new StringBuilder("hello");\r\n\u0009\u0009sb.reverse();\r\n\u0009\u0009s.reverse();\r\n\u0009\u0009if (s == sb.toString())\r\n\u0009\u0009\u0009System.out.println("Equal");\r\n\u0009\u0009else\r\n\u0009\u0009\u0009System.out.println("Not Equal");\r\n\u0009}\r\n}
teste30.exercicio10.numOpcao        = Select 1 option
teste30.exercicio10.opcao_0         = A - Compilation error.
teste30.exercicio10.opcao_1         = B - It will print 'Equal'.
teste30.exercicio10.opcao_2         = C - It will print 'Not Equal'.
teste30.exercicio10.opcao_3         = D - Runtime error.
teste30.exercicio10.opcao_4         = E - None of the above.
teste30.exercicio10.questao         = What will be the result of attempting to compile and run the following program?
teste30.exercicio10.referencia      = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.11, p.86.
teste30.exercicio11.ajuda.cabecalho = Java Basics
teste30.exercicio11.ajuda.conteudo  = First Tip: If you are not importing a class or the package of the class, you need to use the class's fully qualified name while using it. Here, you need to use\r\nutil.log4j.Logger instead of just log4j.Logger:\r\nutil.log4j.Logger logger = new util.log4j.Logger();\r\n\r\nSecond Tip: Using a fully qualified class name always works irrespective of whether you import the package or not. In this case, you are importing package util but Logger is in util.log4j. Therefore, the use of fully qualified class name for Logger, which is util.log4j.Logger, makes it work.\r\n\r\nThird Tip: Remember that you can never access a class that is defined in the default package (i.e. the package with no name) from a class in any other package. So if you remove the package statement from Logger, you can't access it from util package, which is where TestClass is.\r\n
teste30.exercicio11.enunExtra       = \r\n\r\npackage util.log4j;\r\n\r\npublic class Logger {\r\n\u0009public void log(String msg) {\r\n\u0009\u0009System.out.println(msg);\r\n\u0009}\r\n}\r\n\r\nand \r\n\r\npackage util;\r\n\r\npublic class TestClass {\r\n\u0009public static void main(String[] args) throws Exception {\r\n\u0009\u0009Logger logger = new Logger();\r\n\u0009\u0009logger.log("hello");\r\n\u0009}\r\n}
teste30.exercicio11.numOpcao        = Select 2 options
teste30.exercicio11.opcao_0         = A - Replace Logger logger = new Logger(); with: log4j.Logger logger = new log4j.Logger();
teste30.exercicio11.opcao_1         = B - Replace package util.log4j; with package util;
teste30.exercicio11.opcao_2         = C - Replace Logger logger = new Logger(); with: util.log4j.Logger logger = new util.log4j.Logger();
teste30.exercicio11.opcao_3         = D - Remove package util.log4j; from Logger.
teste30.exercicio11.opcao_4         = E - Add import log4j; to TestClass.
teste30.exercicio11.questao         = Given the following contents of two java source files. \r\nWhat changes, when made independently, will enable the code to compile and run?
teste30.exercicio11.referencia      = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.12, p.87.
teste30.exercicio12.ajuda.cabecalho = Java Basics
teste30.exercicio12.ajuda.conteudo  = A valid java identifier is composed of a sequence of java letters and digits, the first of which must be a letter. It cannot be same as any java Keywords or literals (i.e. true, false or null). Java letters include uppercase and lowercase ASCII latin letters and _ , $. (According to JLS.) . In fact, class names can serve as a valid identifier as in 'String' in one of the options bove.\r\n\r\nTip: Even though it is not used anywhere in Java code, it has been kept as a reserved word to prevent its usage in any form.
teste30.exercicio12.enunExtra       = \ 
teste30.exercicio12.numOpcao        = Select 1 option
teste30.exercicio12.opcao_0         = A - goto
teste30.exercicio12.opcao_1         = B - unsigned
teste30.exercicio12.opcao_2         = C - String
teste30.exercicio12.opcao_3         = D - _xyz
teste30.exercicio12.opcao_4         = E - iLikeVeryVeryVeryVeryVeryLongIdentifiersThatDontMakeAnySenseAtAll (65 characters)
teste30.exercicio12.questao         = Which of the following are not legal Java identifiers?
teste30.exercicio12.referencia      = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.13, p.89.
teste30.exercicio13.ajuda.cabecalho = Using Operators and Decision Constructs
teste30.exercicio13.ajuda.conteudo  = Note that both equals() and hashCode() methods can be overridden by the programmer so you can't say anything about what they will return without looking at the code.
teste30.exercicio13.enunExtra       = \ 
teste30.exercicio13.numOpcao        = Select 2 options
teste30.exercicio13.opcao_0         = A - o1.equals(o2) will always be false.
teste30.exercicio13.opcao_1         = B - o1.hashCode() == o2.hashCode() will always be false.
teste30.exercicio13.opcao_2         = C - o1 == o2 will always be false.
teste30.exercicio13.opcao_3         = D - Nothing can be said about o1.equals(o2) regarding what it will return based on\r\nthe given information.
teste30.exercicio13.opcao_4         = E - Nothing can be said about o1 == o2.
teste30.exercicio13.questao         = Consider: \r\no1 and o2 denote two object references to two different objects of same class.\r\nWhich of the following statements are true?
teste30.exercicio13.referencia      = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.14, p.90.
teste30.exercicio14.ajuda.cabecalho = Overloading methods
teste30.exercicio14.ajuda.conteudo  = Here, we have three overloaded probe methods but there is no probe method that takes a String parameter. The only one that is able to accept a String is the one that takes Object as a parameter. So that method will be called.\r\n\r\nA String cannot be assigned to a variable of class Integer or Long variable, but it can be assigned to a variable of class Object.
teste30.exercicio14.enunExtra       = \r\n\r\nclass TestClass {\r\n\u0009void probe(Integer x) {\r\n\u0009\u0009System.out.println("In Integer");\r\n\u0009} // 2\r\n\r\n\u0009void probe(Object x) {\r\n\u0009\u0009System.out.println("In Object");\r\n\u0009} // 3\r\n\r\n\u0009void probe(Long x) {\r\n\u0009\u0009System.out.println("In Long");\r\n\u0009} // 4\r\n\r\n\u0009public static void main(String[] args) {\r\n\u0009\u0009String a = "hello";\r\n\u0009\u0009new TestClass().probe(a);\r\n\u0009}\r\n}
teste30.exercicio14.numOpcao        = Select 1 option
teste30.exercicio14.opcao_0         = A - In Integer
teste30.exercicio14.opcao_1         = B - In Object
teste30.exercicio14.opcao_2         = C - In Long
teste30.exercicio14.opcao_3         = D - In String
teste30.exercicio14.opcao_4         = E - It will not compile
teste30.exercicio14.questao         = Consider the following class...\r\nWhat will be printed?
teste30.exercicio14.referencia      = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.15, p.91.
teste30.exercicio15.ajuda.cabecalho = Working with Methods
teste30.exercicio15.ajuda.conteudo  = It is not possible to access x from main without making it static. Because main is a static method and only static members are accessible from static methods. There is no 'this' available in main so none of the this.x are valid.
teste30.exercicio15.enunExtra       = \r\n\r\nclass TestClass {\r\n\u0009int x;\r\n\r\n\u0009public static void main(String[] args) {\r\n\u0009\u0009// lot of code.\r\n\u0009}\r\n}
teste30.exercicio15.numOpcao        = Select 1 option
teste30.exercicio15.opcao_0         = A - By declaring x as static, main can access this.x
teste30.exercicio15.opcao_1         = B - By declaring x as public, main can access this.x
teste30.exercicio15.opcao_2         = C - By declaring x as protected, main can access this.x
teste30.exercicio15.opcao_3         = D - main cannot access this.x as it is declared now.
teste30.exercicio15.opcao_4         = E - By declaring x as private, main can access this.x
teste30.exercicio15.questao         = Consider the following class...
teste30.exercicio15.referencia      = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.16, p.93.
teste30.exercicio16.ajuda.cabecalho = Working with Java Data Types - String, StringBuilder
teste30.exercicio16.ajuda.conteudo  = First Tip: "   hello java guru   " is a valid String and trim() is a valid method in\r\nString class.\r\n\r\nSecont Tip: trim() does not remove spaces in within the string but the spaces at the\r\nbeginning and at the end.
teste30.exercicio16.enunExtra       = \r\n\r\n"    hello java guru    ".trim();
teste30.exercicio16.numOpcao        = Select 1 option
teste30.exercicio16.opcao_0         = A - The line of code will not compile.
teste30.exercicio16.opcao_1         = B - "hellojavaguru"
teste30.exercicio16.opcao_2         = C - "hello java guru"
teste30.exercicio16.opcao_3         = D - "hello java guru   "
teste30.exercicio16.opcao_4         = E - None of the above
teste30.exercicio16.questao         = What will the following statement return?
teste30.exercicio16.referencia      = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.17, p.94.
teste30.exercicio17.ajuda.cabecalho = Creating and Using Arrays
teste30.exercicio17.ajuda.conteudo  = ArrayList is a subclass of AbstractList.\r\n\r\njava.lang.Object\r\n-  java.util.AbstractCollection<E>\r\n   -  java.util.AbstractList<E>\r\n     -  java.util.ArrayList<E>\r\n\r\nAll Implemented Interfaces:\r\nSerializable, Cloneable, Iterable<E>, Collection<E>, List<E>, RandomAccess \r\n\r\nDirect Known Subclasses:\r\nAttributeList, RoleList, RoleUnresolvedList
teste30.exercicio17.enunExtra       = \ 
teste30.exercicio17.numOpcao        = Select 3 options
teste30.exercicio17.opcao_0         = A - Standard JDK provides no subclasses of ArrayList.
teste30.exercicio17.opcao_1         = B - You cannot store primitives in an ArrayList.
teste30.exercicio17.opcao_2         = C - It allows constant time access to all its elements.
teste30.exercicio17.opcao_3         = D - ArrayList cannot resize dynamically if you add more number of elements than its capacity.
teste30.exercicio17.opcao_4         = E - An ArrayList is backed by an array.
teste30.exercicio17.questao         = Identify the correct statements about ArrayList?
teste30.exercicio17.referencia      = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.18, p.95.
teste30.exercicio18.ajuda.cabecalho = Using Loop Constructs
teste30.exercicio18.ajuda.conteudo  = It is not possible to break out of an if statement. But if the if statement is placed within a labelled block or a switch statement or a loop construct, the usage of break in option 3 would be valid.
teste30.exercicio18.enunExtra       = \ 
teste30.exercicio18.numOpcao        = Select 3 options
teste30.exercicio18.opcao_0         = A - while ( ) break ;
teste30.exercicio18.opcao_1         = B - do { break ; } while (true) ;
teste30.exercicio18.opcao_2         = C - if (true) { break ; } (When not inside a switch block or a loop)
teste30.exercicio18.opcao_3         = D - switch (1) { default : break; }
teste30.exercicio18.opcao_4         = E - for ( ; true ; ) break ;
teste30.exercicio18.questao         = Which of these statements are valid when occurring by themselves?
teste30.exercicio18.referencia      = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.20, p.97.
teste30.exercicio19.ajuda.cabecalho = Working with Inheritance
teste30.exercicio19.ajuda.conteudo  = Since A implements both T1 and T2, 1 and 2 are correct.\r\nb instanceof A will return true as B is a subclass of A. Note that it is 'A' and not 'a'.\r\n( b instanceof a ) will not compile.
teste30.exercicio19.enunExtra       = \r\n\r\n// Filename: TestClass.java\r\nclass TestClass{\r\n\u0009public static void main(String[] args){\r\n\u0009\u0009A a = new A();\r\n\u0009\u0009B b = new B();\r\n\u0009};\r\n}\r\n\r\nclass A implements T1,T2 {}\r\n\r\nclass B extends A implements T1 {}\r\n\r\ninterface T1 { }\r\n\r\ninterface T2 { }
teste30.exercicio19.numOpcao        = Select 4 options
teste30.exercicio19.opcao_0         = A - (a instanceof T1) will return true.
teste30.exercicio19.opcao_1         = B - (a instanceof T2) will return true.
teste30.exercicio19.opcao_2         = C - (b instanceof T1) will return true.
teste30.exercicio19.opcao_3         = D - (b instanceof T2) will return true.
teste30.exercicio19.opcao_4         = E - (b instanceof A) will return false.
teste30.exercicio19.questao         = Which of the given statements are correct about the following code?
teste30.exercicio19.referencia      = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.21, p.98.
teste30.exercicio2.ajuda.cabecalho  = Working with Inheritance
teste30.exercicio2.ajuda.conteudo   = Access to static and instance fields and static methods depends on the class of reference variable and not the actual object to which the variable points to. Observe that this is opposite of what happens in the case of instance methods. In case of instance methods the method of the actual class of the object is called.\r\n\r\nTherefore, in case of System.out.println(new MNOP().x); the reference is of type MNOP and so MNOP's x will be accessed.\r\n\r\nHad it been like this:\r\n  ABCD a = new MNOP();\r\n  System.out.println(a.x);\r\n  System.out.println(a.y);\r\nABCD's x and y would have been accessed because a is of type ABCD even though the actual object is of type MNOP.
teste30.exercicio2.enunExtra        = \r\n\r\nclass ABCD{\r\n\u0009int x = 10;\r\n\u0009static int y = 20;\r\n\u0009}\r\n\r\nclass MNOP extends ABCD{\r\n\u0009int x = 30;\r\n\u0009static int y = 40;\r\n}\r\n\r\npublic class TestClass {\r\n\u0009public static void main(String[] args) {\r\n\u0009\u0009System.out.println(new MNOP().x + ", " + new MNOP().y);\r\n\u0009}\r\n}
teste30.exercicio2.numOpcao         = Select 1 option
teste30.exercicio2.opcao_0          = A - 10, 40
teste30.exercicio2.opcao_1          = B - 30, 20
teste30.exercicio2.opcao_2          = C - 10, 20
teste30.exercicio2.opcao_3          = D - 30, 40
teste30.exercicio2.opcao_4          = E - Compilation error.
teste30.exercicio2.questao          = What will the following code print when compiled and run?
teste30.exercicio2.referencia       = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.2, p.73.
teste30.exercicio20.ajuda.cabecalho = Handling Exceptions
teste30.exercicio20.ajuda.conteudo  = Note: The terminology "thrown by the JVM" and "thrown programatically or by the application" is not precise but is used by popular books. If it helps, you can think of the exception categories as "thrown implicitly" and "thrown explicitly". An exception that is thrown even when there is no throw statement, is said to be thrown implicitly.\r\nFor example, calling a method on null will cause a NullPointerException to be thrown automatically, even though there is no throw statement. On the other hand, a code may throw an exception explicitly by using the throw statement. For example, a method code might check an argument for validity and if it finds the argument inappropriate, it may throw an exception by executing throw new IllegalArgumentException();.\r\nA quick way to determine who should throw an exception is to see if the exception extends java.lang.Error. Errors are always thrown only by the JVM.\r\n\r\nGenerally, RuntimeExceptions are also thrown by the JVM. However, it is ok for an application code to throw a RuntimeException if it makes sense for the application to throw a RuntimeException in a given situation.\r\nYou should know about the following common exception classes:\r\n\r\nIndexOutOfBoundsException extends RuntimeException:\r\nUsually thrown by the JVM. Thrown to indicate that an index of some sort (such as to an array, to a string, or to a vector) is out of range. Applications can subclass this class to indicate similar exceptions.\r\n\r\nArrayIndexOutOfBoundsException and StringIndexOutOfBoundsException both extend  IndexOutOfBoundsException.\r\nIllegalArgumentException extends RuntimeException: If a parameter passed to a method is not valid. Usually thrown by the application.\r\nIllegalStateException extends RuntimeException: Signals that a method has been invoked at an illegal or inappropriate time. In other words, the Java environment or Java application is not in an appropriate state for the requested operation. Usually thrown by the application.\r\n\r\nClassCastException extends RuntimeException: Usually thrown by the JVM.\r\nThrown to indicate that the code has attempted to cast an object to a subclass of which it is not an instance. For example, the following code generates a ClassCastException:\r\n  Object x = new Integer(0);\r\n  System.out.println((String)x);\r\n  NullPointerException extends RuntimeException: Usually thrown by the JVM.\r\nThrown when an application attempts to use null in a case where an object is required. These include:\r\n  Calling the instance method of a null object.\r\n  Accessing or modifying the field of a null object.\r\n  Taking the length of null as if it were an array.\r\n  Accessing or modifying the slots of null as if it were an array.\r\n  Throwing null as if it were a Throwable value.\r\nApplications should throw instances of this class to indicate other illegal uses of the null object.\r\nSecurityException extends RuntimeException: Usually thrown by the JVM. It is thrown by the security manager upon security violation. For example, when a java program runs in a sandbox (such as an applet) and it tries to use prohibited APIs such as File I/O, the security manager throws this exception.
teste30.exercicio20.enunExtra       = \ 
teste30.exercicio20.numOpcao        = Select 1 option
teste30.exercicio20.opcao_0         = A - JVM : IllegalStateException, IllegalArgumentException\r\nApplication : ClassCastException, NullPointerException, SecurityException
teste30.exercicio20.opcao_1         = B - JVM : IllegalStateException, IllegalArgumentException, ClassCastException,\r\nApplication : NullPointerException, SecurityException
teste30.exercicio20.opcao_2         = C - JVM : IllegalStateException, IllegalArgumentException, ClassCastException, NullPointerException\r\nApplication : SecurityException
teste30.exercicio20.opcao_3         = D - JVM : ClassCastException, NullPointerException, SecurityException\r\nApplication : IllegalStateException, IllegalArgumentException
teste30.exercicio20.opcao_4         = E - JVM : ClassCastException, NullPointerException\r\nApplication : IllegalStateException, IllegalArgumentException, SecurityException
teste30.exercicio20.questao         = Identify the exceptions that are usually thrown by the JVM and the exceptions usually thrown by an application.
teste30.exercicio20.referencia      = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.22, p.99.
teste30.exercicio21.ajuda.cabecalho = Using Operators and Decision Constructs
teste30.exercicio21.ajuda.conteudo  = As in C and C++, the Java if statement suffers from the so-called "dangling else problem," The problem is that both the outer if statement and the inner if statement might conceivably own the else clause.\r\nIn this example, one might be tempted to assume that the programmer intended the else clause to belong to the outer if statement.\r\n\r\nThe Java language, like C and C++ and many languages before them, arbitrarily decree that an else clause belongs to the innermost if so as the first if() condition fails (args[0] not being "open") there is no else associated to execute. So, the program does nothing. The else actually is associated with the second if. So had the command line been :\r\njava Test open, it would have executed the second if and thrown ArrayIndexOutOfBoundsException.\r\n\r\nIf the command line had been:\r\njava Test open xyz, it would execute the else part(which is associated with the second if) and would have printed "Go away xyz".
teste30.exercicio21.enunExtra       = \r\n\r\npublic class Test {\r\n\u0009\u0009public static void main(String[] args) {\r\n\u0009\u0009\u0009if (args[0].equals("open"))\r\n\u0009\u0009\u0009\u0009if (args[1].equals("someone"))\r\n\u0009\u0009\u0009\u0009\u0009System.out.println("Hello!");\r\n\u0009\u0009\u0009\u0009else\r\n\u0009\u0009\u0009\u0009\u0009System.out.println("Go away " + args[1]);\r\n\u0009\u0009}\r\n\u0009}
teste30.exercicio21.numOpcao        = Select 1 option
teste30.exercicio21.opcao_0         = A - It will throw ArrayIndexOutOfBoundsException at runtime.
teste30.exercicio21.opcao_1         = B - It will end without exceptions and will print nothing.
teste30.exercicio21.opcao_2         = C - It will print Go away
teste30.exercicio21.opcao_3         = D - It will print Go away and then will throw ArrayIndexOutOfBoundsException.
teste30.exercicio21.opcao_4         = E - None of the above.
teste30.exercicio21.questao         = Consider the following class. Which of the following statements are true if the above program is run with the command line :\r\n\r\njava Test closed
teste30.exercicio21.referencia      = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.23, p.101.
teste30.exercicio22.ajuda.cabecalho = Working with Inheritance
teste30.exercicio22.ajuda.conteudo  = Consider this code:\r\n\r\nclass A extends B implements I {\r\n   D d = new D();\r\n}\r\n\r\nNow, Inheritance defines an is-a relation , so A is-a B because A extends B. This actually means that A can be used in all the places where B is used. A can substitute for B anywhere because A is-a B. As all objects have Object as their super class, every object 'is-a' Object.\r\n\r\nSince A implements I, it is sometimes said that A 'is-like-a' I. That is, although A is not a I but for all purposes A is like an I. The distinction between is-a and is-like-a is not important for the exam. For the purpose of the exam, is-like-a is same as is-a.\r\nAggregation defines a has-a relation. Here, D is a member object in A so D is contained in A. So it is said that A 'has-a' D. All Java objects have the class Object as the ultimate superclass, and so Object is always at the root of any inheritance hierarchy.
teste30.exercicio22.enunExtra       = \r\n\r\ninterface X1 { }\r\ninterface X2 { }\r\nclass A { }\r\nclass B extends A implements X1 { }\r\nclass C extends B implements X2 {\r\n   D d = new D();\r\n}\r\nclass D { }
teste30.exercicio22.numOpcao        = Select 3 options
teste30.exercicio22.opcao_0         = A - D is-a B.
teste30.exercicio22.opcao_1         = B - B has-a D.
teste30.exercicio22.opcao_2         = C - C is-a A
teste30.exercicio22.opcao_3         = D - C is-a X1
teste30.exercicio22.opcao_4         = E - C is-a X2
teste30.exercicio22.questao         = Consider this code. Which of the following statements are true?
teste30.exercicio22.referencia      = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.24, p.103.
teste30.exercicio23.ajuda.cabecalho = Working with Inheritance
teste30.exercicio23.ajuda.conteudo  = Note that if a subclass class constructor doesn't explicitly call the super class constructor, the compiler automatically inserts super(); as the first statement of the base class constructor. So option 5 is not needed.\r\nSince the constructor of Bird is private, the subclass cannot access it and therefore, it needs to be made public.
teste30.exercicio23.enunExtra       = \r\n\r\nclass Bird {\r\n\u0009private Bird(){ }\r\n}\r\n\r\nclass Eagle extends Bird {\r\n\u0009public String name;\r\n\r\n\u0009public Eagle(String name){\r\n\u0009\u0009this.name = name;\r\n\u0009}\r\n\r\n\u0009public static void main(String[] args) {\r\n\u0009\u0009System.out.println(new Eagle("Bald Eagle").name);\r\n\u0009}\r\n}
teste30.exercicio23.numOpcao        = Select 1 option
teste30.exercicio23.opcao_0         = A - Nothing, it will compile as it is.
teste30.exercicio23.opcao_1         = B - Make Eagle class declaration public:\r\npublic class Eagle { ... }
teste30.exercicio23.opcao_2         = C - Make the Eagle constructor private:\r\nprivate Eagle(String name){ ... }
teste30.exercicio23.opcao_3         = D - Make Bird constructor public:\r\npublic Bird() { ... }
teste30.exercicio23.opcao_4         = E - Insert super(); as the first line in Eagle constructor:\r\npublic Eagle(String name){ super(); this.name = name;}
teste30.exercicio23.questao         = Consider the following code appearing in Eagle.java. What needs to be done to make this code compile?
teste30.exercicio23.referencia      = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.25, p.105.
teste30.exercicio24.ajuda.cabecalho = Working with Inheritance
teste30.exercicio24.ajuda.conteudo  = Note that calling super() will not always work because if the super class has defined a constructor with arguments and has not defined a no args constructor then no args constructor will not be provided by the compiler. It is provided only to the class that does not define ANY constructor explicitly.
teste30.exercicio24.enunExtra       = \ 
teste30.exercicio24.numOpcao        = Select 2 options
teste30.exercicio24.opcao_0         = A - A super( ) or this( ) call must always be provided explicitly as the first statement in the body of the constructor.
teste30.exercicio24.opcao_1         = B - If a subclass does not have any declared constructors, the implicit default constructor of the subclass will have a call to super( ).
teste30.exercicio24.opcao_2         = C - If neither super( ) or this( ) is declared as the first statement of the body of a constructor,\r\nthen this( ) will implicitly be inserted as the first statement.
teste30.exercicio24.opcao_3         = D - super(...) can only be called in the first line of the constructor but this(...) can be called from anywhere.
teste30.exercicio24.opcao_4         = E - You can either call super(...) or this(...) but not both.
teste30.exercicio24.questao         = Which of these statements are true?
teste30.exercicio24.referencia      = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.26, p.107.
teste30.exercicio25.ajuda.cabecalho = Handling Exceptions
teste30.exercicio25.ajuda.conteudo  = Syntax of try/catch/finally is:\r\ntry {\r\n} catch(Exception1 e) {... }\r\ncatch(Exception2 e) {... }\r\n...\r\ncatch(ExceptionN e) {... }\r\nfinally { ... }\r\n\r\nWith a try, either a catch and or finally or both can occur. A try MUST be followed by at least one catch or finally. (Unless it is a try with resources statement, which is not in scope for this exam.)\r\nIn Java 7, you can collapse the catch blocks into a single one:\r\n\r\ntry {\r\n...\r\n}\r\ncatch (SQLException | IOException | RuntimeException e) {\r\n   //In this block, the class of the actual exception object will be whatever exception is thrown at runtime.\r\n   //But the class of the reference e will be the closest common super class of all the exceptions in the catch block.\r\n   //In this case, it will be java.lang.Exception because that is the most specific class that is a super class for all the three exceptions.\r\ne.printStackTrace();\r\n}
teste30.exercicio25.enunExtra       = \r\n\r\nclass NewException extends Exception { }\r\n\r\nclass AnotherException extends Exception { }\r\n\r\npublic class ExceptionTest {\r\n\u0009public static void main(String[] args) throws Exception{\r\n\u0009\u0009try {\r\n\u0009\u0009\u0009m2();\r\n\u0009\u0009} finally{\r\n\u0009\u0009\u0009m3();\r\n\u0009\u0009} catch (NewException e) {}\r\n}\r\n\r\npublic static void m2() throws NewException { throw new NewException(); }\r\n\r\n\u0009public static void m3() throws AnotherException {\r\n\u0009\u0009throw new AnotherException();\r\n}
teste30.exercicio25.numOpcao        = Select 1 option
teste30.exercicio25.opcao_0         = A - It will compile but will throw AnotherException when run.
teste30.exercicio25.opcao_1         = B - It will compile but will throw NewException when run.
teste30.exercicio25.opcao_2         = C - It will compile and run without throwing any exceptions.
teste30.exercicio25.opcao_3         = D - It will not compile.
teste30.exercicio25.opcao_4         = E - None of the above.
teste30.exercicio25.questao         = What will be the result of compiling and running the following program ?
teste30.exercicio25.referencia      = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.27, p.108.
teste30.exercicio26.ajuda.cabecalho = Overloading methods
teste30.exercicio26.ajuda.conteudo  = Tip: For overloading a method, the "signature" of the overloaded methods must be different. In simple terms, a method signature includes method name and the number and type of arguments that it takes. \r\nSo if the parameter list of the two methods with the same name are different either in terms of number or in terms of the types of the parameters, then they are overloaded.\r\nFor example:\r\n\r\nMethod m1 is overloaded if you have two methods : void m1(int k); and void m1(double d);\r\nor if you have: void m1(int k); and void m1(int k, double d);\r\n\r\nNote that return type is not considered a part of the method signature.
teste30.exercicio26.enunExtra       = \ 
teste30.exercicio26.numOpcao        = Select 1 option
teste30.exercicio26.opcao_0         = A - An overloading method must have a different parameter list and same return \r\ntype as that of the overloaded method.
teste30.exercicio26.opcao_1         = B - If there is another method with the same name but with a different number \r\nof arguments in a class then that method can be called as overloaded.
teste30.exercicio26.opcao_2         = C - If there is another method with the same name and same number and type of arguments but with a different return type in a class then that method can be called as overloaded.
teste30.exercicio26.opcao_3         = D - An overloaded method means a method with the same name and same number and type of arguments exists in the super class and sub class.
teste30.exercicio26.opcao_4         = E - If there is another method with the same name but with a different number of arguments in a class then that method can't be called as overloaded.
teste30.exercicio26.questao         = Which of the following are true regarding overloading of a method?
teste30.exercicio26.referencia      = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.28, p.110.
teste30.exercicio27.ajuda.cabecalho = Working with Inheritance
teste30.exercicio27.ajuda.conteudo  = First Tip: a = (B)(I)b; - class B does implement I because it extends A, which implements I. A reference of type I can be cast to any class at compile time. Since B is-a A, it can be assigned to a.\r\n\r\nSecond Tip: I i = (C) a; - It will compile because a C is-a A, which is-a I, and a reference of class A can point to an object of class C. But it will fail at runtime because a does not point to an object of class C.
teste30.exercicio27.enunExtra       = \r\n\r\ninterface I{ }\r\n\r\nclass A implements I{ }\r\nclass B extends A { }\r\nclass C extends B{ }\r\n\r\nAnd the following declarations:\r\n\r\nA a = new A();\r\nB b = new B();\r\n\r\nIdentify options that will compile and run without error.
teste30.exercicio27.numOpcao        = Select 1 option
teste30.exercicio27.opcao_0         = A - a = (B)(I)b;
teste30.exercicio27.opcao_1         = B - b = (B)(I) a;
teste30.exercicio27.opcao_2         = C - a = (I) b;
teste30.exercicio27.opcao_3         = D - I i = (C) a;
teste30.exercicio27.opcao_4         = E - a = (I) c;
teste30.exercicio27.questao         = Consider the following classes :
teste30.exercicio27.referencia      = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.29, p.111.
teste30.exercicio28.ajuda.cabecalho = Using Loop Constructs
teste30.exercicio28.ajuda.conteudo  = First Tip: ;; - It will cause an infinite loop\r\n\r\nSecond Tip: k must be initialized first. So it should be: int k=0; k<0; k++
teste30.exercicio28.enunExtra       = \r\n\r\npublic class TestClass {\r\n\u0009public static void main(String[] args) {\r\n\u0009\u0009int[] values = { 10, 20, 30 };\r\n\u0009\u0009for( /* put code here */ ){\r\n\u0009\u0009}\r\n\u0009}\r\n}
teste30.exercicio28.numOpcao        = Select 2 options
teste30.exercicio28.opcao_0         = A - int k : values
teste30.exercicio28.opcao_1         = B - int k in values
teste30.exercicio28.opcao_2         = C - int k; k<0; k++
teste30.exercicio28.opcao_3         = D - ;;
teste30.exercicio28.opcao_4         = E - ; k<values.length;k++
teste30.exercicio28.questao         = What can you do to make the following code compile?
teste30.exercicio28.referencia      = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.30, p.113.
teste30.exercicio29.ajuda.cabecalho = Creating and Using Arrays
teste30.exercicio29.ajuda.conteudo  = Tip: saveObject(0); - 0 is an int, which means it is a primitive. So it will be boxed into an Integer object when you pass it to a method that expects an Object. However, Integer cannot be passed to a method that expects a List. Therefore, this option is not valid. Had the method bean  aveObject(Object obj), it would have been valid because an Integer is an Object.
teste30.exercicio29.enunExtra       = \r\n\r\nint i = 0 ;\r\nObject prevObject ;\r\n   public void saveObject(List e ){\r\n   prevObject = e ;\r\n   i++ ;\r\n}
teste30.exercicio29.numOpcao        = Select 3 options
teste30.exercicio29.opcao_0         = A - saveObject( new ArrayList() );
teste30.exercicio29.opcao_1         = B - Collection c = new ArrayList(); saveObject( c );
teste30.exercicio29.opcao_2         = C - List l = new ArrayList(); saveObject(l);
teste30.exercicio29.opcao_3         = D - saveObject(null);
teste30.exercicio29.opcao_4         = E - saveObject(0); //The argument is the number zero and not the letter o
teste30.exercicio29.questao         = Consider the following code to count objects and save the most recent object ...\r\nWhich of the following calls will work without throwing an exception?
teste30.exercicio29.referencia      = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.31, p.114.
teste30.exercicio3.ajuda.cabecalho  = Creating and Using Arrays
teste30.exercicio3.ajuda.conteudo   = The [] notation can be placed both before and after the variable name in an array declaration.\r\n\r\nint[] ia, ba; // here ia and ba both are int arrays.\r\nint ia[], ba; //here only ia is int array and ba is an int.\r\n\r\nMultidimensional arrays are created by creating arrays that can contain references to other arrays .
teste30.exercicio3.enunExtra        = \ 
teste30.exercicio3.numOpcao         = Select 4 option
teste30.exercicio3.opcao_0          = A - int[ ] a[ ] = new int [5][4] ;
teste30.exercicio3.opcao_1          = B - int a[ ][ ] = new int [5][4] ;
teste30.exercicio3.opcao_2          = C - int a[ ][ ] = new int [ ][4] ;
teste30.exercicio3.opcao_3          = D - int[ ] a[ ] = new int[4][ ] ;
teste30.exercicio3.opcao_4          = E - int[ ][ ] a = new int[5][4] ;
teste30.exercicio3.questao          = Which of these array declarations and instantiations are legal?
teste30.exercicio3.referencia       = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.03, p.75.
teste30.exercicio30.ajuda.cabecalho = Working with Java Data Types - Variables and Objects
teste30.exercicio30.ajuda.conteudo  = First Tip: Since Runnable is an interface, you can do:\r\nRunnable r = new Runnable(){\r\n   public void run(){ }\r\n};\r\n\r\nSecond Tip: Since Thread implements Runnable.
teste30.exercicio30.enunExtra       = \ 
teste30.exercicio30.numOpcao        = Select 4 options
teste30.exercicio30.opcao_0         = A - Object o = new java.io.File("a.txt");\r\n(Assume that java.io.File is a valid class.)
teste30.exercicio30.opcao_1         = B - Boolean bool = false;
teste30.exercicio30.opcao_2         = C - char ch = 10;
teste30.exercicio30.opcao_3         = D - Thread t = new Runnable();\r\n(Assume that Runnable is a valid interface.)
teste30.exercicio30.opcao_4         = E - Runnable r = new Thread();\r\n(Assume that Thread is a class that implements Runnable interface)
teste30.exercicio30.questao         = Which of the following statements are acceptable?
teste30.exercicio30.referencia      = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.32, p.115.
teste30.exercicio4.ajuda.cabecalho  = Java Basics
teste30.exercicio4.ajuda.conteudo   = First Tip: Although you can import java.lang package explicitly, it is not required because this package is always imported by the compiler.\r\n\r\nSecond Tip: include is not valid keyword in Java.
teste30.exercicio4.enunExtra        = \r\n\r\n// line 1\r\npublic class TestClass {\r\n\u0009public static void main(String[] args) {\r\n\u0009\u0009PrintWriter pw = new PrintWriter(System.out);\r\n\u0009\u0009OutputStreamWriter osw = new OutputStreamWriter(System.out);\r\n\u0009\u0009pw.print("hello");\r\n\u0009}\r\n}
teste30.exercicio4.numOpcao         = Select 1 option
teste30.exercicio4.opcao_0          = A - import java.lang.*;
teste30.exercicio4.opcao_1          = B - import java.io.*;
teste30.exercicio4.opcao_2          = C - import java.io.OutputStreamWriter;
teste30.exercicio4.opcao_3          = D - include java.io.*;
teste30.exercicio4.opcao_4          = E - include java.lang.System;
teste30.exercicio4.questao          = Which of the following lines can be inserted at line 1 to make the program run? \r\nAssume that PrintWriter and OutputStreamWriter are valid classes in java.io package.
teste30.exercicio4.referencia       = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.03, p.75.
teste30.exercicio5.ajuda.cabecalho  = Using Loop Constructs
teste30.exercicio5.ajuda.conteudo   = j will be less than 1 for only the first iteration. So, first it will print 0, 0. Next, i and j are incremented.\r\nBecause j is not less than 1 at the start of the loop, the condition fails and it comes out of the loop. Finally, it will print 1,1.
teste30.exercicio5.enunExtra        = \r\n\r\npublic class TestClass {\r\n\u0009public static void main(String args[]) {\r\n\u0009\u0009int i;\r\n\u0009\u0009int j;\r\n\u0009\u0009for (i = 0, j = 0; j < 1; ++j, i++) {\r\n\u0009\u0009\u0009System.out.println(i + " " + j);\r\n\u0009\u0009}\r\n\u0009\u0009System.out.println(i + " " + j);\r\n\u0009}\r\n}
teste30.exercicio5.numOpcao         = Select 1 option
teste30.exercicio5.opcao_0          = A - 0 0 will be printed twice.
teste30.exercicio5.opcao_1          = B - 1 1 will be printed once.
teste30.exercicio5.opcao_2          = C - 0 1 will be printed followed by 1 2.
teste30.exercicio5.opcao_3          = D - 0 will be printed followed by 1 1.
teste30.exercicio5.opcao_4          = E - It will print 0 0 and then 0 1.
teste30.exercicio5.questao          = What will be the output if you run the following program?
teste30.exercicio5.referencia       = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.05, p.78.
teste30.exercicio6.ajuda.cabecalho  = Using Operators and Decision Constructs
teste30.exercicio6.ajuda.conteudo   = Tip: It should be if , else if, else.
teste30.exercicio6.enunExtra        = \r\n\r\npublic int transformNumber(int n){\r\n\u0009int radix = 2;\r\n\u0009int output = 0;\r\n\u0009output += radix*n;\r\n\u0009radix = output/radix;\r\n\u0009if(output<14){\r\n\u0009\u0009return output;\r\n\u0009}\r\n\u0009else{\r\n\u0009\u0009output = output*radix/2;\r\n\u0009\u0009return output;\r\n\u0009}\r\n\u0009else {\r\n\u0009\u0009return output/2;\r\n\u0009}\r\n}
teste30.exercicio6.numOpcao         = Select 1 option
teste30.exercicio6.opcao_0          = A - 7
teste30.exercicio6.opcao_1          = B - 14
teste30.exercicio6.opcao_2          = C - 49
teste30.exercicio6.opcao_3          = D - 20
teste30.exercicio6.opcao_4          = E - Compilation fails.
teste30.exercicio6.questao          = What will the following method return if called with an argument of 7?
teste30.exercicio6.referencia       = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.06, p.79.
teste30.exercicio7.ajuda.cabecalho  = Handling Exceptions
teste30.exercicio7.ajuda.conteudo   = You can use Throwable as well as Exception as both of them are super classes of MyException.\r\nRuntimeException (and its subclasses such as NullPointerException and ArrayIndexOutOfBoundsException) is not a checked exception. So it cannot cover for MyException which is a checked exception.\r\n\r\nYou cannot use Error as well because it is not in the hierarchy of MyException, which is Object <- Throwable <- Exception <- MyException.
teste30.exercicio7.enunExtra        = \r\n\r\npublic class TestClass {\r\n\u0009class MyException extends Exception {\r\n\u0009}\r\n\r\n\u0009public void myMethod() throws XXXX {\r\n\u0009\u0009throw new MyException();\r\n\u0009}\r\n}
teste30.exercicio7.numOpcao         = Select 3 options
teste30.exercicio7.opcao_0          = A - MyException
teste30.exercicio7.opcao_1          = B - Exception
teste30.exercicio7.opcao_2          = C - No throws clause is necessary
teste30.exercicio7.opcao_3          = D - Throwable
teste30.exercicio7.opcao_4          = E - RuntimeException
teste30.exercicio7.questao          = Consider the following code, What can replace XXXX?
teste30.exercicio7.referencia       = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.08, p.81.
teste30.exercicio8.ajuda.cabecalho  = Working with Java Data Types - String, StringBuilder
teste30.exercicio8.ajuda.conteudo   = Since indexing starts with 0, the maximum value that you can pass to charAt is length-1.\r\nAs per the API documentation for charAt, it throws IndexOutOfBoundsException if you pass an invalid value.\r\n\r\nBoth - ArrayIndexOutOfBoundsException and StringIndexOutOfBoundsException, extend  IndexOutOfBoundsException and although in practice, the charAt method throws StringIndexOutOfBoundsException, it is not a valid option because the implementation is free to throw some other exception as long as it is an IndexOutOfBoundsException. There are questions in the exam on this aspect.
teste30.exercicio8.enunExtra        = \ 
teste30.exercicio8.numOpcao         = Select 2 options
teste30.exercicio8.opcao_0          = A - The charAt( ) method can take a char value as an argument.
teste30.exercicio8.opcao_1          = B - The charAt( ) method returns a Character object.
teste30.exercicio8.opcao_2          = C - The expression char ch = "12345".charAt(3) will assign 3 to ch.
teste30.exercicio8.opcao_3          = D - The expression char ch = str.charAt(str.length()) where str is "12345", will assign 3 to ch.
teste30.exercicio8.opcao_4          = E - The index of the first character is 0.
teste30.exercicio8.questao          = Which of these statements concerning the charAt() method of the String class are true?
teste30.exercicio8.referencia       = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.08, p.82.
teste30.exercicio9.ajuda.cabecalho  = Working with Inheritance
teste30.exercicio9.ajuda.conteudo   = First Tip: Soccer s = (Soccer) g; is a valid because g does refer to an object of class.\r\n\r\nSecond Tip: g.play("cosco") is not valid because even though the object referred to by g is of class Soccer, the reference type of g is Game, which does not have play(String ) method.
teste30.exercicio9.enunExtra        = \r\n\r\nclass Game {\r\n\u0009public void play() throws Exception {\r\n\u0009\u0009System.out.println("Playing...");\r\n\u0009}\r\n}\r\n\r\nclass Soccer extends Game {\r\n\u0009public void play(String ball) {\r\n\u0009\u0009System.out.println("Playing Soccer with " + ball);\r\n\u0009}\r\n}\r\n\r\npublic class TestClass {\r\n\u0009public static void main(String[] args) throws Exception {\r\n\u0009\u0009Game g = new Soccer();\r\n\u0009\u0009// 1\r\n\u0009\u0009Soccer s = (Soccer) g;\r\n\u0009\u0009// 2\r\n\u0009}\r\n}
teste30.exercicio9.numOpcao         = Select 2 options
teste30.exercicio9.opcao_0          = A - It will not compile as it is.
teste30.exercicio9.opcao_1          = B - It will throw an Exception at runtime if it is run as it is.
teste30.exercicio9.opcao_2          = C - g.play(); at //1 and s.play("cosco"); at //2
teste30.exercicio9.opcao_3          = D - g.play(); at //1 and s.play(); at //2
teste30.exercicio9.opcao_4          = E - g.play("cosco"); at //1 and s.play("cosco"); at //2
teste30.exercicio9.questao          = Consider the following program. \r\nWhich of the given options can be inserted at //1 and //2?
teste30.exercicio9.referencia       = DESCHMUKH, Hanumant. Oracle Certified Associate Java SE 7 Programmer Practice Exams (1Z0-803). 1.ed. EUA, q.10, p.85.

###############################################################
## TESTE DE 60 QUESTÕES - EXERCÍCIOS.
###############################################################

teste60.exercicio1.ajuda.cabecalho  = Java Basics
teste60.exercicio1.ajuda.conteudo   = The Java compiler and Java Runtime Environment aren\u2019t components of a Java source file.
teste60.exercicio1.enunExtra        = \ 
teste60.exercicio1.numOpcao         = Select 4 options
teste60.exercicio1.opcao_0          = A - package statement
teste60.exercicio1.opcao_1          = B - import statements
teste60.exercicio1.opcao_2          = C - methods
teste60.exercicio1.opcao_3          = D - variables
teste60.exercicio1.opcao_4          = E - Java Runtime Environment
teste60.exercicio1.questao          = What are the valid components of a Java source file (choose all that apply):
teste60.exercicio1.referencia       = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.58.
teste60.exercicio10.ajuda.cabecalho = The structure of a Java class and source code file
teste60.exercicio10.ajuda.conteudo  = The comments can appear anywhere in a class. They can appear before and after package and import statements. They can appear before or after a class, method, or variable declaration.\r\nThe first statement (if present) in a class should be a package statement. It can\u2019t be placed after an import statement or a declaration of a class. The import statement should follow a package statement and be followed by a class declaration.\r\nThe class declaration follows the import statements, if present. It\u2019s followed by the declaration of the methods and variables.
teste60.exercicio10.enunExtra       = \r\n\r\n1 comments\r\n2 import statement\r\n3 package statement\r\n4 methods\r\n5 class declaration\r\n6 variables
teste60.exercicio10.numOpcao        = Select 3 options
teste60.exercicio10.opcao_0         = A - 1, 3, 2, 5, 6, 4
teste60.exercicio10.opcao_1         = B - 3, 1, 2, 5, 4, 6
teste60.exercicio10.opcao_2         = C - 3, 2, 1, 4, 5, 6
teste60.exercicio10.opcao_3         = D - 3, 2, 1, 5, 6, 4
teste60.exercicio10.opcao_4         = E - 6,2,3,5,4,1
teste60.exercicio10.questao         = The following numbered list of Java class components is not in any particular order. Select the correct order of their occurrence in a Java class (choose all that apply):
teste60.exercicio10.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.02, p.59.
teste60.exercicio11.ajuda.cabecalho = Primitive variables
teste60.exercicio11.ajuda.conteudo  = Tip: Java primitive data types are predefined by the programming language. They can\u2019t be defined by a programmer.
teste60.exercicio11.enunExtra       = \ 
teste60.exercicio11.numOpcao        = Select 3 options
teste60.exercicio11.opcao_0         = A - A programmer can\u2019t define a new primitive data type.
teste60.exercicio11.opcao_1         = B - A programmer can define a new primitive data type.
teste60.exercicio11.opcao_2         = C - Once assigned, the value of a primitive can\u2019t be modified.
teste60.exercicio11.opcao_3         = D - A value can\u2019t be assigned to a primitive variable.
teste60.exercicio11.opcao_4         = E - None of the Above.
teste60.exercicio11.questao         = Select all incorrect statements:
teste60.exercicio11.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.101.
teste60.exercicio12.ajuda.cabecalho = Operators
teste60.exercicio12.ajuda.conteudo  = The code will fail to compile; hence, it can\u2019t execute. You can\u2019t compare incomparable types, such as a boolean value with a number.
teste60.exercicio12.enunExtra       = \r\n\r\nboolean b = false;\r\nint i = 90;\r\nSystem.out.println(i >= b);
teste60.exercicio12.numOpcao        = Select 1 option
teste60.exercicio12.opcao_0         = A - Code prints true
teste60.exercicio12.opcao_1         = B - Code prints false
teste60.exercicio12.opcao_2         = C - Code prints 90 >= false
teste60.exercicio12.opcao_3         = D - Compilation error
teste60.exercicio12.opcao_4         = E - None of the Above.
teste60.exercicio12.questao         = What is true about the following lines of code?
teste60.exercicio12.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.08, p.103.
teste60.exercicio13.ajuda.cabecalho = Apply encapsulation principles to a class
teste60.exercicio13.ajuda.conteudo  = Tip: This class also doesn\u2019t have a constructor, so it\u2019s eligible for the creation of a default constructor. The following isn\u2019t a constructor because the return type of a constructor isn\u2019t void:\r\n\r\nvoid EJava() {}\r\n\r\nIt\u2019s a regular and valid method, with the name same as its class.
teste60.exercicio13.enunExtra       = \ 
teste60.exercicio13.numOpcao        = Select 2 options
teste60.exercicio13.opcao_0         = A - If a user defines a private constructor for a public class, Java creates a public default constructor for the class.
teste60.exercicio13.opcao_1         = B - A class that gets a default constructor doesn\u2019t have overloaded constructors.
teste60.exercicio13.opcao_2         = C - A user can overload the default constructor of a class.
teste60.exercicio13.opcao_3         = D - The following class is eligible for default constructor: class EJava {}
teste60.exercicio13.opcao_4         = E - The following class is also eligible for a default constructor: class EJava { void EJava() {} }
teste60.exercicio13.questao         = Select the incorrect options:
teste60.exercicio13.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.10, p.166.
teste60.exercicio14.ajuda.cabecalho = Passing objects and primitives to methods
teste60.exercicio14.ajuda.conteudo  = You can define overloaded constructors with different access modifiers in the same way that you define overloaded methods with different access modifiers.\r\nBut a change in only the access modifier can\u2019t be used to define overloaded methods\r\nor constructors. private methods and constructors are also counted as overloaded methods. The following line of code calls EJava\u2019s constructor, which doesn\u2019t accept any method argument:\r\n\r\nEJava eJava = new EJava();\r\n\r\nThe no-argument constructor of this class calls the constructor that accepts an int argument, which in turn calls the constructor with the String argument. Because the constructor with the String constructor doesn\u2019t call any other methods, it prints protected and returns control to the constructor that accepts an int argument. This constructor prints private and returns control back to the constructor that doesn\u2019t accept any method argument. This constructor prints public and returns control to the main method.
teste60.exercicio14.enunExtra       = \r\n\r\nclass EJava {\r\n\u0009public EJava() {\r\n\u0009\u0009this(7);\r\n\u0009\u0009System.out.println("public");\r\n\u0009}\r\n\r\n\u0009private EJava(int val) {\r\n\u0009\u0009this("Sunday");\r\n\u0009\u0009System.out.println("private");\r\n\u0009}\r\n\r\n\u0009protected EJava(String val) {\r\n\u0009\u0009System.out.println("protected");\r\n\u0009}\r\n}\r\n\r\nclass TestEJava {\r\n\u0009public static void main(String[] args) {\r\n\u0009\u0009EJava eJava = new EJava();\r\n\u0009}\r\n}
teste60.exercicio14.numOpcao        = Select 2 options
teste60.exercicio14.opcao_0         = A - The class EJava defines three overloaded constructors.
teste60.exercicio14.opcao_1         = B - The class EJava defines two overloaded constructors. The private constructor isn\u2019t counted as an overloaded constructor.
teste60.exercicio14.opcao_2         = C - Constructors with different access modifiers can\u2019t call each other.
teste60.exercicio14.opcao_3         = D - The code prints the following: protected  /  private  /  public
teste60.exercicio14.opcao_4         = E - The code prints the following: public  /  private  /  protected
teste60.exercicio14.questao         = Examine the following code and select the correct options:
teste60.exercicio14.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.09, p.169.
teste60.exercicio15.ajuda.cabecalho = Arrays
teste60.exercicio15.ajuda.conteudo  = The previous code won\u2019t compile due to the following line of code:\r\n\r\narr[3] = longVar;\r\n\r\nThis line of code tries to assign a value of type long to a variable of type int. Because Java does support implicit widening conversions for variables, the previous code fails to compile. Also, the previous code tries to trick you regarding your understanding of the following:\r\n\r\n\u25A0 Assigning a char value to an int array element (arr[1] = c)\r\n\u25A0 Adding a byte value to an int array element (arr[0] = b)\r\n\u25A0 Whether an unassigned int array element is assigned a default value (arr[2])\r\n\u25A0 Whether arr[0] + arr[1] + arr[2] + arr[3] prints the sum of all these values, or a concatenated value\r\n\r\nWhen answering questions in the OCA Java SE 7 Java Programmer I exam, be careful\r\nabout such tactics. If any of the answers list a compilation error or a runtime exception as an option, look for obvious lines of code that could result in it. In this example, arr[3] = longVar will result in compilation error.
teste60.exercicio15.enunExtra       = \ 
teste60.exercicio15.numOpcao        = Select 1 option
teste60.exercicio15.opcao_0         = A - 4c010
teste60.exercicio15.opcao_1         = B - 4c10
teste60.exercicio15.opcao_2         = C - 113
teste60.exercicio15.opcao_3         = D - 103
teste60.exercicio15.opcao_4         = E - Compilation error
teste60.exercicio15.questao         = What is the output of the following code?\r\n\r\nclass EJavaGuruArray {\r\n\u0009public static void main(String args[]) {\r\n\u0009\u0009int[] arr = new int[5];\r\n\u0009\u0009byte b = 4;\r\n\u0009\u0009char c = 'c';\r\n\u0009\u0009long longVar = 10;\r\n\u0009\u0009arr[0] = b;\r\n\u0009\u0009arr[1] = c;\r\n\u0009\u0009arr[3] = longVar;\r\n\u0009\u0009System.out.println(arr[0] + arr[1] + arr[2] + arr[3]);\r\n\u0009}\r\n}
teste60.exercicio15.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.232.
teste60.exercicio16.ajuda.cabecalho = Arrays
teste60.exercicio16.ajuda.conteudo  = Because a char value can be assigned to an int value, you might assume that a char array can be assigned to an int array. But we\u2019re talking about arrays of int and char primitives, which aren\u2019t the same as a primitive int or char. Arrays themselves are reference variables, which refer to a collection of objects of similar type.
teste60.exercicio16.enunExtra       = \ 
teste60.exercicio16.numOpcao        = Select 1 option
teste60.exercicio16.opcao_0         = A - 0:0
teste60.exercicio16.opcao_1         = B - a:b
teste60.exercicio16.opcao_2         = C - 0:b
teste60.exercicio16.opcao_3         = D - a:0
teste60.exercicio16.opcao_4         = E - Compilation error
teste60.exercicio16.questao         = What is the output of the following code?\r\n\r\nclass EJavaGuruArray2 {\r\n\u0009public static void main(String args[]) {\r\n\u0009\u0009int[] arr1;\r\n\u0009\u0009int[] arr2 = new int[3];\r\n\u0009\u0009char[] arr3 = { 'a', 'b' };\r\n\u0009\u0009arr1 = arr2;\r\n\u0009\u0009arr1 = arr3;\r\n\u0009\u0009System.out.println(arr1[0] + ":" + arr1[1]);\r\n\u0009}\r\n}
teste60.exercicio16.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.02, p.232.
teste60.exercicio17.ajuda.cabecalho = Arrays
teste60.exercicio17.ajuda.conteudo  = Tip: Unlike objects of other classes, an array isn\u2019t initialized using the keyword new followed by the word array. When the keyword new is used to initialize an array, it\u2019s followed by the type of the array, not the word array.
teste60.exercicio17.enunExtra       = \ 
teste60.exercicio17.numOpcao        = Select 2 options
teste60.exercicio17.opcao_0         = A - int[][] array1 = {{1, 2, 3}, {}, {1, 2,3, 4, 5}};
teste60.exercicio17.opcao_1         = B - int[][] array2 = new array() {{1, 2, 3}, {}, {1, 2,3, 4, 5}};
teste60.exercicio17.opcao_2         = C - int[][] array3 = {1, 2, 3}, {0}, {1, 2,3, 4, 5};
teste60.exercicio17.opcao_3         = D - int[][] array5 = new int[2][];
teste60.exercicio17.opcao_4         = E - None of the Above.
teste60.exercicio17.questao         = Which of the following are valid lines of code to define a multidimensional int array?
teste60.exercicio17.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.03, p.233.
teste60.exercicio18.ajuda.cabecalho = Create and use do-while loops
teste60.exercicio18.ajuda.conteudo  = The condition specified in the do-while loop evaluates to false (because 10<2 evaluates to false). But the control enters the do-while loop because the dowhile loop executes at least once\u2014its condition is checked at the end of the loop. \r\nThe while evaluates to true for the first iteration and adds 20 to i, making it 30. The while loop doesn\u2019t execute for the second time. Hence, the value of the variable i at the end of the execution of the previous code is 30.
teste60.exercicio18.enunExtra       = \ 
teste60.exercicio18.numOpcao        = Select 1 option
teste60.exercicio18.opcao_0         = A - 10
teste60.exercicio18.opcao_1         = B - 30
teste60.exercicio18.opcao_2         = C - 31
teste60.exercicio18.opcao_3         = D - 32
teste60.exercicio18.opcao_4         = E - Compilation error
teste60.exercicio18.questao         = What\u2019s the output of the following code?\r\n\r\nclass Loop2 {\r\n\u0009public static void main(String[] args) {\r\n\u0009\u0009int i = 10;\r\n\u0009\u0009do\r\n\u0009\u0009\u0009while (i < 15)\r\n\u0009\u0009\u0009\u0009i = i + 20;\r\n\u0009\u0009while (i < 2);\r\n\u0009\u0009System.out.println(i);\r\n\u0009}\r\n}
teste60.exercicio18.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.283.
teste60.exercicio19.ajuda.cabecalho = 1
teste60.exercicio19.ajuda.conteudo  = 1
teste60.exercicio19.enunExtra       = 1 
teste60.exercicio19.numOpcao        = Select 1 options
teste60.exercicio19.opcao_0         = A - 
teste60.exercicio19.opcao_1         = B - 
teste60.exercicio19.opcao_2         = C - 
teste60.exercicio19.opcao_3         = D - 
teste60.exercicio19.opcao_4         = E - 
teste60.exercicio19.questao         = 1
teste60.exercicio19.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste60.exercicio2.ajuda.cabecalho  = The structure of a Java class and source code file
teste60.exercicio2.ajuda.conteudo   = First Tip: #connect isn\u2019t a statement in Java. # is used to add comments in UNIX.\r\n\r\nSecond Tip: #package and $import aren\u2019t valid statements or directives in Java.
teste60.exercicio2.enunExtra        = \ 
teste60.exercicio2.numOpcao         = Select 1 option
teste60.exercicio2.opcao_0          = A - #connect java compiler;  /  #connect java virtual machine;  /  class EJavaGuru {}
teste60.exercicio2.opcao_1          = B - package java compiler;  /  import java virtual machine;  /  class EJavaGuru {}
teste60.exercicio2.opcao_2          = C - import javavirtualmachine.*;  /  package javacompiler;  /  class EJavaGuru {  /  \r\nvoid method1() {}  /  int count;  /  }
teste60.exercicio2.opcao_3          = D - package javacompiler;  /  import javavirtualmachine.*;  /  class EJavaGuru {  /  \r\nvoid method1() {}  /  int count;  /  }
teste60.exercicio2.opcao_4          = E - #package javacompiler;  /  $import javavirtualmachine;  /  class EJavaGuru {  /  \r\nvoid method1() {}  /  int count;  /  }
teste60.exercicio2.questao          = Which of the following examples define the correct Java class structure?
teste60.exercicio2.referencia       = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.03, p.59.
teste60.exercicio20.ajuda.cabecalho = Java access modifiers
teste60.exercicio20.ajuda.conteudo  = Tip: You can define multiple classes, interfaces, and enums in a Java source code file.
teste60.exercicio20.enunExtra       = \r\n\r\n// contents of MyClass.java\r\npackage com.ejavaguru;\r\nimport java.util.Date;\r\nclass Student {}\r\nclass Course {}
teste60.exercicio20.numOpcao        = Select 2 options
teste60.exercicio20.opcao_0         = A - The imported class, java.util.Date, can be accessed only in the class Student.
teste60.exercicio20.opcao_1         = B - The imported class, java.util.Date, can be accessed by both the Student and Course classes.
teste60.exercicio20.opcao_2         = C - Both of the classes Student and Course are defined in the package com.ejavaguru.
teste60.exercicio20.opcao_3         = D - Only the class Student is defined in the package com.ejavaguru. The class Course is defined in the default Java package.
teste60.exercicio20.opcao_4         = E - None of the Above.
teste60.exercicio20.questao         = Given the following contents of the Java source code file MyClass.java, select the correct options:
teste60.exercicio20.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.04, p.60.
teste60.exercicio21.ajuda.cabecalho = Primitive variables
teste60.exercicio21.ajuda.conteudo  = First Tip: The valid data types are int and Integer (a wrapper class with I in uppercase).\r\n\r\nSecond Tip: The char data types are internally stored as unsigned integer values and can be used in arithmetic expressions.
teste60.exercicio21.enunExtra       = \r\n\r\npublic class Prim { // line 1\r\n\u0009public static void main(String[] args) { // line 2\r\n\u0009\u0009char a = 'a'; // line 3\r\n\u0009\u0009char b = -10; // line 4\r\n\u0009\u0009char c = '1'; // line 5\r\n\u0009\u0009integer d = 1000; // line 6\r\n\u0009\u0009System.out.println(++a + b++ * c - d); // line 7\r\n\u0009} // line 8\r\n}
teste60.exercicio21.numOpcao        = Select 3 options
teste60.exercicio21.opcao_0         = A - Code at line 4 fails to compile.
teste60.exercicio21.opcao_1         = B - Code at line 5 fails to compile.
teste60.exercicio21.opcao_2         = C - Code at line 6 fails to compile.
teste60.exercicio21.opcao_3         = D - Code at line 7 fails to compile.
teste60.exercicio21.opcao_4         = E - None of the Above.
teste60.exercicio21.questao         = Which of the options are correct for the following code?
teste60.exercicio21.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.02, p.101.
teste60.exercicio22.ajuda.cabecalho = Operators
teste60.exercicio22.ajuda.conteudo  = Tip: Both the short-circuit operators && and || have the same operator precedence.
teste60.exercicio22.enunExtra       = \r\n\r\npublic class Prim { // line 1\r\n\u0009public static void main(String[] args) { // line 2\r\n\u0009\u0009int num1 = 12; // line 3\r\n\u0009\u0009float num2 = 17.8f; // line 4\r\n\u0009\u0009boolean eJavaResult = true; // line 5\r\n\u0009\u0009boolean returnVal = num1 >= 12 && num2 < 4.567 // line 6\r\n\u0009\u0009\u0009\u0009|| eJavaResult == true;\r\n\u0009\u0009System.out.println(returnVal); // line 7\r\n\u0009} // line 8\r\n} // line 9
teste60.exercicio22.numOpcao        = Select 2 options
teste60.exercicio22.opcao_0         = A - Code prints false
teste60.exercicio22.opcao_1         = B - Code prints true
teste60.exercicio22.opcao_2         = C - Code will print true if code on line 6 is modified to the following:  boolean returnVal = (num1 >= 12 && num2 < 4.567) || eJavaResult == true;
teste60.exercicio22.opcao_3         = D - Code will print true if code on line 6 is modified to the following: boolean returnVal = num1 >= 12 && (num2 < 4.567 || eJavaResult == false);
teste60.exercicio22.opcao_4         = E - None of the Above.
teste60.exercicio22.questao         = Examine the following code and select the correct options:
teste60.exercicio22.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.09, p.103.
teste60.exercicio23.ajuda.cabecalho = The while and do-while loops
teste60.exercicio23.ajuda.conteudo  = If you\u2019ve attempted to answer question 5-1, it\u2019s likely that you would select the same answer for this question, too. I\u2019ve deliberately used the same question text and variable names (with a small difference) because you may encounter a similar pattern in the OCA Java SE 7 Programmer I exam. This question includes one difference: unlike question 5-1, it uses a postfix unary operator in the while condition.\r\n\r\nThe condition specified in the do-while loop evaluates to false (because 10<2 evaluates to false). But the control enters the do-while loop because the do-while loop executes at least once\u2014its condition is checked at the end of the loop. This  question prints outs 32, not 30, because the condition specified in the while loop (which has an increment operator) executes twice.\r\n\r\nIn this question, the while loop condition executes twice. For the first evaluation, i++ < 15 (that is, 10<15) returns true and increments the value of variable i by 1 (due to the postfix increment operator). The loop body modifies the value of i to 31. The second condition evaluates i++<15 (that is, 31<15) to false. But due to the postfix increment operator value of i, it increments to 32. The final value is printed as 32.
teste60.exercicio23.enunExtra       = \ 
teste60.exercicio23.numOpcao        = Select 1 option
teste60.exercicio23.opcao_0         = A - 10
teste60.exercicio23.opcao_1         = B - 30
teste60.exercicio23.opcao_2         = C - 31
teste60.exercicio23.opcao_3         = D - 32
teste60.exercicio23.opcao_4         = E - Compilation error
teste60.exercicio23.questao         = What\u2019s the output of the following code?\r\n\r\nclass Loop2 {\r\n\u0009public static void main(String[] args) {\r\n\u0009\u0009int i = 10;\r\n\u0009\u0009do\r\n\u0009\u0009\u0009while (i++ < 15)\r\n\u0009\u0009\u0009\u0009i = i + 20;\r\n\u0009\u0009while (i < 2);\r\n\u0009\u0009System.out.println(i);\r\n\u0009}\r\n}
teste60.exercicio23.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.02, p.284.
teste60.exercicio24.ajuda.cabecalho = 1
teste60.exercicio24.ajuda.conteudo  = 1
teste60.exercicio24.enunExtra       = \ 
teste60.exercicio24.numOpcao        = Select 1 option
teste60.exercicio24.questao         = 1
teste60.exercicio24.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste60.exercicio25.ajuda.cabecalho = 1
teste60.exercicio25.ajuda.conteudo  = 1
teste60.exercicio25.enunExtra       = 1 
teste60.exercicio25.numOpcao        = Select 1 options
teste60.exercicio25.opcao_0         = A - 
teste60.exercicio25.opcao_1         = B - 
teste60.exercicio25.opcao_2         = C - 
teste60.exercicio25.opcao_3         = D - 
teste60.exercicio25.opcao_4         = E - 
teste60.exercicio25.questao         = 1
teste60.exercicio25.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste60.exercicio26.ajuda.cabecalho = 1
teste60.exercicio26.ajuda.conteudo  = 1
teste60.exercicio26.enunExtra       = 1 
teste60.exercicio26.numOpcao        = Select 1 options
teste60.exercicio26.opcao_0         = A - 
teste60.exercicio26.opcao_1         = B - 
teste60.exercicio26.opcao_2         = C - 
teste60.exercicio26.opcao_3         = D - 
teste60.exercicio26.opcao_4         = E - 
teste60.exercicio26.questao         = 1
teste60.exercicio26.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste60.exercicio27.ajuda.cabecalho = ArrayList
teste60.exercicio27.ajuda.conteudo  = First Tip: An ArrayList internally uses an array to store all its elements. Whenever you add an element to an ArrayList, it checks whether the array can accommodate the new value. If it can\u2019t, ArrayList creates a larger array, copies all the existing values to the new array, and then adds the new value at the end of the array. If you frequently add elements to an ArrayList, it makes sense to create an ArrayList with a bigger capacity because the previous process isn\u2019t repeated for each ArrayList insertion.\r\n\r\nSecond Tip: Calling clone() on an ArrayList will create a separate reference variable that stores the same number of elements as the ArrayList to be cloned. But each individual ArrayList element will refer to the same object; that is, the individual ArrayList elements aren\u2019t cloned.
teste60.exercicio27.enunExtra       = \ 
teste60.exercicio27.numOpcao        = Select 2 options
teste60.exercicio27.opcao_0         = A - By default, an ArrayList creates an array with an initial size of 16 to store its elements.
teste60.exercicio27.opcao_1         = B - Because ArrayList stores only objects, you can\u2019t pass element of an ArrayList to a switch construct.
teste60.exercicio27.opcao_2         = C - Calling clear() or remove() on an ArrayList, will remove all its elements.
teste60.exercicio27.opcao_3         = D - If you frequently add elements to an ArrayList, specifying a larger capacity will improve the code efficiency.
teste60.exercicio27.opcao_4         = E - Calling the method clone() on an ArrayList creates its shallow copy; that is, it doesn\u2019t clone the individual list elements.
teste60.exercicio27.questao         = Which of the following statements are correct?
teste60.exercicio27.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.04, p.233.
teste60.exercicio28.ajuda.cabecalho = 1
teste60.exercicio28.ajuda.conteudo  = 1
teste60.exercicio28.enunExtra       = 1 
teste60.exercicio28.numOpcao        = Select 1 options
teste60.exercicio28.opcao_0         = A - 
teste60.exercicio28.opcao_1         = B - 
teste60.exercicio28.opcao_2         = C - 
teste60.exercicio28.opcao_3         = D - 
teste60.exercicio28.opcao_4         = E - 
teste60.exercicio28.questao         = 1
teste60.exercicio28.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste60.exercicio29.ajuda.cabecalho = 1
teste60.exercicio29.ajuda.conteudo  = 1
teste60.exercicio29.enunExtra       = 1 
teste60.exercicio29.numOpcao        = Select 1 options
teste60.exercicio29.opcao_0         = A - 
teste60.exercicio29.opcao_1         = B - 
teste60.exercicio29.opcao_2         = C - 
teste60.exercicio29.opcao_3         = D - 
teste60.exercicio29.opcao_4         = E - 
teste60.exercicio29.questao         = 1
teste60.exercicio29.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste60.exercicio3.ajuda.cabecalho  = Java access modifiers
teste60.exercicio3.ajuda.conteudo   = Tip: If the variable courseName is defined as a private member, it won\u2019t be accessible from the class EJavaGuru. An attempt to do so will cause it to fail at compile time. Because the code won\u2019t compile, it can\u2019t execute.
teste60.exercicio3.enunExtra        = \r\n\r\nclass Course {\r\n\u0009String courseName;\r\n}\r\n\r\nclass EJavaGuru {\r\n\u0009public static void main(String args[]) {\r\n\u0009\u0009Course c = new Course();\r\n\u0009\u0009c.courseName = "Java";\r\n\u0009\u0009System.out.println(c.courseName);\r\n\u0009}\r\n}
teste60.exercicio3.numOpcao         = Select 1 option
teste60.exercicio3.opcao_0          = A - class EJavaGuru will print Java.
teste60.exercicio3.opcao_1          = B - class EJavaGuru will print null.
teste60.exercicio3.opcao_2          = C - class EJavaGuru won\u2019t compile.
teste60.exercicio3.opcao_3          = D - class EJavaGuru will throw an exception at runtime.
teste60.exercicio3.opcao_4          = E - None of the above.
teste60.exercicio3.questao          = Examine the following code. Which of the following statements will be true if the variable courseName is defined as a private variable?
teste60.exercicio3.referencia       = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.09, p.61.
teste60.exercicio30.ajuda.cabecalho = Executable Java applications
teste60.exercicio30.ajuda.conteudo  = The command-line arguments passed to the main method of a class do not contain the word Java and the name of the class. Because the position of an array is zero-based, the method argument is assigned the following values:\r\n\r\nargs[0] -> one\r\nargs[1] -> two\r\nargs[2] -> three\r\nargs[3] -> four
teste60.exercicio30.enunExtra       = \r\n\r\nwhat is the output of the previous class, if it is executed using the following command:\r\n\r\njava EJavaGuru one two three four
teste60.exercicio30.numOpcao        = Select 1 option
teste60.exercicio30.opcao_0         = A - one:two:three
teste60.exercicio30.opcao_1         = B - EJavaGuru:one:two
teste60.exercicio30.opcao_2         = C - java:EJavaGuru:one
teste60.exercicio30.opcao_3         = D - two:three:four
teste60.exercicio30.opcao_4         = E - None of the Above.
teste60.exercicio30.questao         = Given the following definition of the class EJavaGuru,\r\n\r\nclass EJavaGuru {\r\n\u0009public static void main(String[] args) {\r\n\u0009\u0009System.out.println(args[1] + ":" + args[2] + ":" + args[3]);\r\n\u0009}\r\n}
teste60.exercicio30.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.05, p.60.
teste60.exercicio31.ajuda.cabecalho = Operators
teste60.exercicio31.ajuda.conteudo  = The prefix increment operator (++) used with the variable a will increment its value before it is used in the expression ++a + b++ * c. The postfix increment operator (++) used with the variable b will increment its value after its initial value is used in the expression ++a + b++ * c.
teste60.exercicio31.enunExtra       = \r\n\r\npublic class Foo {\r\n\u0009public static void main(String[] args) {\r\n\u0009\u0009int a = 10;\r\n\u0009\u0009long b = 20;\r\n\u0009\u0009short c = 30;\r\n\u0009\u0009System.out.println(++a + b++ * c);\r\n\u0009}\r\n}
teste60.exercicio31.numOpcao        = Select 1 option
teste60.exercicio31.opcao_0         = A - 611
teste60.exercicio31.opcao_1         = B - 641
teste60.exercicio31.opcao_2         = C - 930
teste60.exercicio31.opcao_3         = D - 960
teste60.exercicio31.opcao_4         = E - None of the Above
teste60.exercicio31.questao         = What is the output of the following code?
teste60.exercicio31.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.03, p.102.
teste60.exercicio32.ajuda.cabecalho = Operators
teste60.exercicio32.ajuda.conteudo  = Tip: Note that the expression myBool = false uses the assignment operator (=) and not a comparison operator (==). This expression assigns boolean literal false to myBool; it doesn\u2019t compare false with myBool. Watch out for similar (trick) assignments in the exam, which may seem to be comparing values.
teste60.exercicio32.enunExtra       = \r\n\r\nboolean myBool = false; // line 1\r\nint yourInt = 10; // line 2\r\nfloat hisFloat = 19.54f; // line 3\r\n\r\nSystem.out.println(hisFloat > yourInt); // line 4\r\nSystem.out.println(yourInt = 10); // line 5\r\nSystem.out.println(myBool > false); // line 6
teste60.exercicio32.numOpcao        = Select 1 option
teste60.exercicio32.opcao_0         = A - true  /  true  /  false
teste60.exercicio32.opcao_1         = B - 10.0  /  false  /  false
teste60.exercicio32.opcao_2         = C - false  /  false  /  false
teste60.exercicio32.opcao_3         = D - Compilation error
teste60.exercicio32.opcao_4         = E - None of the Above.
teste60.exercicio32.questao         = If the functionality of the operators = and > were to be swapped in Java (for the code on line numbers 4, 5, and 6), what would be the result of the following code?
teste60.exercicio32.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.10, p.104.
teste60.exercicio33.ajuda.cabecalho = Apply encapsulation principles to a class
teste60.exercicio33.ajuda.conteudo  = A well-encapsulated class should be like a capsule, hiding its instance variables from the outside world. The only way you should access and modify instance variables is through the public methods of a class to ensure that the outside world can access only the variables the class allows it to. By defining methods to assign values to its instance variables, a class can control the range of values that can be assigned to them.
teste60.exercicio33.enunExtra       = \ 
teste60.exercicio33.numOpcao        = Select 2 options
teste60.exercicio33.opcao_0         = A - Define instance variables as private members.
teste60.exercicio33.opcao_1         = B - Define public methods to access and modify the instance variables.
teste60.exercicio33.opcao_2         = C - Define some of the instance variables as public members.
teste60.exercicio33.opcao_3         = D - All of the above.
teste60.exercicio33.opcao_4         = E - None of the Above.
teste60.exercicio33.questao         = How can you include encapsulation in your class design?
teste60.exercicio33.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.162.
teste60.exercicio34.ajuda.cabecalho = The for loop\r\nThe while and do-while loops
teste60.exercicio34.ajuda.conteudo  = The enhanced for loop can be used within all types of looping and conditional constructs. Notice the use of \u201Ccan\u201D and \u201Ccan\u2019t\u201D in the answer options. It\u2019s important to take note of these subtle differences.
teste60.exercicio34.enunExtra       = \ 
teste60.exercicio34.numOpcao        = Select 1 option
teste60.exercicio34.opcao_0         = A - The enhanced for loop can\u2019t be used within a regular for loop.
teste60.exercicio34.opcao_1         = B - The enhanced for loop can\u2019t be used within a while loop.
teste60.exercicio34.opcao_2         = C - The enhanced for loop can be used within a do-while loop.
teste60.exercicio34.opcao_3         = D - The enhanced for loop can\u2019t be used within a switch construct.
teste60.exercicio34.opcao_4         = E - All of the above statements are false.
teste60.exercicio34.questao         = Which of the following statements is true ?
teste60.exercicio34.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.03, p.289.
teste60.exercicio35.ajuda.cabecalho = 1
teste60.exercicio35.ajuda.conteudo  = 1
teste60.exercicio35.enunExtra       = 1 
teste60.exercicio35.numOpcao        = Select 1 options
teste60.exercicio35.opcao_0         = A - 
teste60.exercicio35.opcao_1         = B - 
teste60.exercicio35.opcao_2         = C - 
teste60.exercicio35.opcao_3         = D - 
teste60.exercicio35.opcao_4         = E - 
teste60.exercicio35.questao         = 1
teste60.exercicio35.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste60.exercicio36.ajuda.cabecalho = 1
teste60.exercicio36.ajuda.conteudo  = 1
teste60.exercicio36.enunExtra       = 1 
teste60.exercicio36.numOpcao        = Select 1 options
teste60.exercicio36.opcao_0         = A - 
teste60.exercicio36.opcao_1         = B - 
teste60.exercicio36.opcao_2         = C - 
teste60.exercicio36.opcao_3         = D - 
teste60.exercicio36.opcao_4         = E - 
teste60.exercicio36.questao         = 1
teste60.exercicio36.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste60.exercicio37.ajuda.cabecalho = ArrayList
teste60.exercicio37.ajuda.conteudo  = First Tip: A developer may prefer using an ArrayList over an array because it offers all the benefits of an array and a list. For example, you can easily add or remove elements from an ArrayList.\r\n\r\nSecond Tip: An array requires you to specify the total number of elements before you can add any element to it. But you don\u2019t need to specify the total number of elements that you may add to an ArrayList at any time in your code.
teste60.exercicio37.enunExtra       = \ 
teste60.exercicio37.numOpcao        = Select 4 options
teste60.exercicio37.opcao_0         = A - An ArrayList offers a resizable array, which is easily managed using the methods it provides. You can add and remove elements from an ArrayList.
teste60.exercicio37.opcao_1         = B - Values stored by an ArrayList can be modified.
teste60.exercicio37.opcao_2         = C - You can iterate through elements of an ArrayList using a for loop, Iterator, or ListIterator.
teste60.exercicio37.opcao_3         = D - An ArrayList requires you to specify the total elements before you can store any elements in it.
teste60.exercicio37.opcao_4         = E - An ArrayList can store any type of object.
teste60.exercicio37.questao         = Which of the following statements are correct?
teste60.exercicio37.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.05, p.233.
teste60.exercicio38.ajuda.cabecalho = 1
teste60.exercicio38.ajuda.conteudo  = 1
teste60.exercicio38.enunExtra       = 1 
teste60.exercicio38.numOpcao        = Select 1 options
teste60.exercicio38.opcao_0         = A - 
teste60.exercicio38.opcao_1         = B - 
teste60.exercicio38.opcao_2         = C - 
teste60.exercicio38.opcao_3         = D - 
teste60.exercicio38.opcao_4         = E - 
teste60.exercicio38.questao         = 1
teste60.exercicio38.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste60.exercicio39.ajuda.cabecalho = 1
teste60.exercicio39.ajuda.conteudo  = 1
teste60.exercicio39.enunExtra       = 1 
teste60.exercicio39.numOpcao        = Select 1 options
teste60.exercicio39.opcao_0         = A - 
teste60.exercicio39.opcao_1         = B - 
teste60.exercicio39.opcao_2         = C - 
teste60.exercicio39.opcao_3         = D - 
teste60.exercicio39.opcao_4         = E - 
teste60.exercicio39.questao         = 1
teste60.exercicio39.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste60.exercicio4.ajuda.cabecalho  = Java access modifiers
teste60.exercicio4.ajuda.conteudo   = Tip: The class will fail to compile because a non-public class cannot be accessed outside a package in which it is defined. The class Course therefore can\u2019t be accessed from within the class EJavaGuru, even if it is explicitly imported into it. If the class itself isn\u2019t accessible, there\u2019s no point in accessing a public member of a class.
teste60.exercicio4.enunExtra        = \r\n\r\nwhat\u2019s the output of the following code?\r\n\r\npackage com.ejavaguru;\r\n\r\nimport com.ejavaguru.courses.Course;\r\n\r\nclass EJavaGuru {\r\n\u0009public static void main(String args[]) {\r\n\u0009\u0009Course c = new Course();\r\n\u0009\u0009c.courseName = "Java";\r\n\u0009\u0009System.out.println(c.courseName);\r\n\u0009}\r\n}
teste60.exercicio4.numOpcao         = Select 1 option
teste60.exercicio4.opcao_0          = A - The class EJavaGuru will print Java.
teste60.exercicio4.opcao_1          = B - The class EJavaGuru will print null.
teste60.exercicio4.opcao_2          = C - The class EJavaGuru won\u2019t compile.
teste60.exercicio4.opcao_3          = D - The class EJavaGuru will throw an exception at runtime.
teste60.exercicio4.opcao_4          = E - None of the Above.
teste60.exercicio4.questao          = Given the following definition of the class Course,\r\n\r\npackage com.ejavaguru.courses;\r\n\r\nclass Course {\r\n   public String courseName;\r\n}
teste60.exercicio4.referencia       = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.10, p.61.
teste60.exercicio40.ajuda.cabecalho = Executable Java applications
teste60.exercicio40.ajuda.conteudo  = First Tip: Extra spaces in a class are ignored by the Java compiler.\r\n\r\nSecond Tip: The main method accepts an array of String as a method argument.
teste60.exercicio40.enunExtra       = \r\n\r\npublic class EJavaGuru {\r\n\u0009// INSERT CODE HERE\r\n\u0009{\r\n\u0009\u0009System.out.println("EJavaGuru");\r\n\u0009}\r\n}
teste60.exercicio40.numOpcao        = Select 1 option
teste60.exercicio40.opcao_0         = A - public void main (String[] args)
teste60.exercicio40.opcao_1         = B - public void main(String     args[])
teste60.exercicio40.opcao_2         = C - static public void main    (String[] array)
teste60.exercicio40.opcao_3         = D - public static void main (String args)
teste60.exercicio40.opcao_4         = E - static public main (String args[])
teste60.exercicio40.questao         = Which of the following options, when inserted at //INSERT CODE HERE, will print out EJavaGuru?
teste60.exercicio40.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.06, p.60.
teste60.exercicio41.ajuda.cabecalho = Identifiers
teste60.exercicio41.ajuda.conteudo  = Tip: Use a long data type to store big number values, a boolean data type to store yes/no values as true/false, and a double or float to store decimal numbers.
teste60.exercicio41.enunExtra       = \ 
teste60.exercicio41.numOpcao        = Select 2 options
teste60.exercicio41.opcao_0         = A - long, boolean, double
teste60.exercicio41.opcao_1         = B - long, int, float
teste60.exercicio41.opcao_2         = C - char, int, double
teste60.exercicio41.opcao_3         = D - long, boolean, float
teste60.exercicio41.opcao_4         = E - None of the Above.
teste60.exercicio41.questao         = Select the option(s) that is/are the best choice for the following:\r\n\r\n___________________ should be used to store a count of cars manufactured by a car manufacturing company. _________________ should be used to store whether this car manufacturing company modifies the interiors on the customer\u2019s request. ____________ should be used to store the maximum speed of a car.
teste60.exercicio41.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste60.exercicio42.ajuda.cabecalho = Identifiers
teste60.exercicio42.ajuda.conteudo  = First Tip: It assigns a hexadecimal literal value to the long.\r\n\r\nSecond Tip: It assigns an octal literal value to the variable short.
teste60.exercicio42.enunExtra       = \ 
teste60.exercicio42.numOpcao        = Select 4 options
teste60.exercicio42.opcao_0         = A - byte a7 = -0;
teste60.exercicio42.opcao_1         = B - long a8 = 123456789;
teste60.exercicio42.opcao_2         = C - long a3 = 0x10C;
teste60.exercicio42.opcao_3         = D - short a4 = 0512;
teste60.exercicio42.opcao_4         = E - double a5 = 10;
teste60.exercicio42.questao         = Which of the following options contain correct code to declare and initialize variables to store whole numbers?
teste60.exercicio42.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.05, p.102.
teste60.exercicio43.ajuda.cabecalho = Apply encapsulation principles to a class
teste60.exercicio43.ajuda.conteudo  = This class isn\u2019t well encapsulated because its instance variable height is defined as a public member. Because the instance variable can be directly accessed by other classes, the variable doesn\u2019t always use the method setHeight to set its height. The class Person can\u2019t control the values that can be assigned to its public variable height.
teste60.exercicio43.enunExtra       = \r\n\r\npublic class Person {\r\n\u0009public int height;\r\n\r\n\u0009public void setHeight(int newHeight) {\r\n\u0009\u0009if (newHeight <= 300)\r\n\u0009\u0009\u0009height = newHeight;\r\n\u0009}\r\n}
teste60.exercicio43.numOpcao        = Select 1 option
teste60.exercicio43.opcao_0         = A - The height of a Person can never be set to more than 300.
teste60.exercicio43.opcao_1         = B - The previous code is an example of a well-encapsulated class.
teste60.exercicio43.opcao_2         = C - The class would be better encapsulated if the height validation weren\u2019t set to 300.
teste60.exercicio43.opcao_3         = D - Even though the class isn\u2019t well encapsulated, it can be inherited by other classes.
teste60.exercicio43.opcao_4         = E - None of the Above.
teste60.exercicio43.questao         = Examine the following code and select the correct option(s):
teste60.exercicio43.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.02, p.162.
teste60.exercicio44.ajuda.cabecalho = The if and if-else constructs
teste60.exercicio44.ajuda.conteudo  = Explanation: First of all, the code has no compilation errors. This question has a trick\u2014the following code snippet isn\u2019t part of the if construct:\r\n\r\n{\r\nSystem.out.println("false");\r\n}\r\n\r\nHence, the value false will print no matter what, regardless of whether the condition in the if construct evaluates to true or false. Because the opening and closing braces for this code snippet are placed right after the if construct, it leads us to believe that this code snippet is the else part of the if construct. Also, note that an if construct uses the keyword else to define the else part. This keyword is missing in this question.\r\n\r\nThe if condition (that is, a++ > 10) evaluates to false because the postfix increment operator (a++) increments the value of the variable a immediately after its earlier value is used. 10 isn\u2019t greater than 10 so this condition evaluates to false.
teste60.exercicio44.enunExtra       = \  
teste60.exercicio44.numOpcao        = Select 1 option
teste60.exercicio44.opcao_0         = A - true  /  false  /  ABC
teste60.exercicio44.opcao_1         = B - false  /  ABC
teste60.exercicio44.opcao_2         = C - true  /  ABC
teste60.exercicio44.opcao_3         = D - Compilation error
teste60.exercicio44.opcao_4         = E - None of the Above.
teste60.exercicio44.questao         = What\u2019s the output of the following code?\r\n\r\nint a = 10;\r\nif(a++>10) {\r\n\u0009System.out.println("true");\r\n}\r\n{\r\n\u0009System.out.println("false");\r\n} \r\nSystem.out.println("ABC");
teste60.exercicio44.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.04, p.284.
teste60.exercicio45.ajuda.cabecalho = 1
teste60.exercicio45.ajuda.conteudo  = 1
teste60.exercicio45.enunExtra       = 1 
teste60.exercicio45.numOpcao        = Select 1 options
teste60.exercicio45.opcao_0         = A - 
teste60.exercicio45.opcao_1         = B - 
teste60.exercicio45.opcao_2         = C - 
teste60.exercicio45.opcao_3         = D - 
teste60.exercicio45.opcao_4         = E - 
teste60.exercicio45.questao         = 1
teste60.exercicio45.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste60.exercicio46.ajuda.cabecalho = 1
teste60.exercicio46.ajuda.conteudo  = 1
teste60.exercicio46.enunExtra       = 1 
teste60.exercicio46.numOpcao        = Select 1 options
teste60.exercicio46.opcao_0         = A - 
teste60.exercicio46.opcao_1         = B - 
teste60.exercicio46.opcao_2         = C - 
teste60.exercicio46.opcao_3         = D - 
teste60.exercicio46.opcao_4         = E - 
teste60.exercicio46.questao         = 1
teste60.exercicio46.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste60.exercicio47.ajuda.cabecalho = ArrayList
teste60.exercicio47.ajuda.conteudo  = First Tip: The method contains accepts an object and compares it with the values stored in the list. It returns true if the method finds a match and false otherwise. This method uses the equals method defined by the object stored in the list. In the example, the ArrayList stores objects of class String, which has overridden the equals method. The equals method of the String class compares the values stored by it. This is why line 7 returns the value true.\r\n\r\nSecond Tip: The clear method removes all the individual elements of an ArrayList such that an attempt to access any of the earlier ArrayList elements will throw a runtime exception. It doesn\u2019t set the ArrayList reference variable to null.
teste60.exercicio47.enunExtra       = \ 
teste60.exercicio47.numOpcao        = Select 4 options
teste60.exercicio47.opcao_0         = A - Line 7 prints true
teste60.exercicio47.opcao_1         = B - Line 7 prints false
teste60.exercicio47.opcao_2         = C - Line 10 prints []
teste60.exercicio47.opcao_3         = D - Line 8 prints 1
teste60.exercicio47.opcao_4         = E - Line 9 removes all elements of the list ejg
teste60.exercicio47.questao         = What is the output of the following code?\r\n\r\nimport java.util.*; // line 1\r\n\r\nclass EJavaGuruArrayList { // line 2\r\n\u0009public static void main(String args[]) { // line 3\r\n\u0009\u0009ArrayList<String> ejg = new ArrayList<>(); // line 4\r\n\u0009\u0009ejg.add("One"); // line 5\r\n\u0009\u0009ejg.add("Two"); // line 6\r\n\u0009\u0009System.out.println(ejg.contains(new String("One"))); // line 7\r\n\u0009\u0009System.out.println(ejg.indexOf("Two")); // line 8\r\n\u0009\u0009ejg.clear(); // line 9\r\n\u0009\u0009System.out.println(ejg); // line 10\r\n\u0009\u0009System.out.println(ejg.get(1)); // line 11\r\n\u0009} // line 12\r\n\r\n\u0009}
teste60.exercicio47.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.06, p.234.
teste60.exercicio48.ajuda.cabecalho = 1
teste60.exercicio48.ajuda.conteudo  = 1
teste60.exercicio48.enunExtra       = 1 
teste60.exercicio48.numOpcao        = Select 1 options
teste60.exercicio48.opcao_0         = A - 
teste60.exercicio48.opcao_1         = B - 
teste60.exercicio48.opcao_2         = C - 
teste60.exercicio48.opcao_3         = D - 
teste60.exercicio48.opcao_4         = E - 
teste60.exercicio48.questao         = 1
teste60.exercicio48.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste60.exercicio49.ajuda.cabecalho = 1
teste60.exercicio49.ajuda.conteudo  = 1
teste60.exercicio49.enunExtra       = 1 
teste60.exercicio49.numOpcao        = Select 1 options
teste60.exercicio49.opcao_0         = A - 
teste60.exercicio49.opcao_1         = B - 
teste60.exercicio49.opcao_2         = C - 
teste60.exercicio49.opcao_3         = D - 
teste60.exercicio49.opcao_4         = E - 
teste60.exercicio49.questao         = 1
teste60.exercicio49.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste60.exercicio5.ajuda.cabecalho  = Create methods with arguments and return values
teste60.exercicio5.ajuda.conteudo   = The class EJavaGuruPassObject1 defines two methods, someMethod and anotherMethod. The method someMethod modifies the value of the object parameter passed to it. Hence, the changes are visible within this method and in the calling method (method main). But the method anotherMethod reassigns the reference variable passed to it. Changes to any of the values of this object are limited to this method. They aren\u2019t reflected in the calling method (the main method).
teste60.exercicio5.enunExtra        = \r\n\r\nwhat is the output of the following code?\r\n\r\nclass EJavaGuruPassObjects1 {\r\n\u0009public static void main(String args[]) {\r\n\u0009\u0009Person p = new Person();\r\n\u0009\u0009p.name = "EJava";\r\n\u0009\u0009anotherMethod(p);\r\n\u0009\u0009System.out.println(p.name);\r\n\u0009\u0009someMethod(p);\r\n\u0009\u0009System.out.println(p.name);\r\n\u0009}\r\n\r\n\u0009static void someMethod(Person p) {\r\n\u0009\u0009p.name = "someMethod";\r\n\u0009\u0009System.out.println(p.name);\r\n\u0009}\r\n\r\n\u0009static void anotherMethod(Person p) {\r\n\u0009\u0009p = new Person();\r\n\u0009\u0009p.name = "anotherMethod";\r\n\u0009\u0009System.out.println(p.name);\r\n\u0009}\r\n}
teste60.exercicio5.numOpcao         = Select 1 option
teste60.exercicio5.opcao_0          = A - anotherMethod  /  anotherMethod  /  someMethod  /  someMethod
teste60.exercicio5.opcao_1          = B - anotherMethod  /  EJava  /  someMethod  /  someMethod
teste60.exercicio5.opcao_2          = C - anotherMethod  /  EJava  /  someMethod  /  EJava
teste60.exercicio5.opcao_3          = D - Compilation error.
teste60.exercicio5.opcao_4          = E - None of the Above.
teste60.exercicio5.questao          = Given the following definition of class Person,\r\n\r\nclass Person {\r\n\u0009public String name;\r\n\u0009public int height;\r\n}
teste60.exercicio5.referencia       = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.06, p.163.
teste60.exercicio50.ajuda.cabecalho = Executable Java applications
teste60.exercicio50.ajuda.conteudo  = Tip: The Java Virtual Machine calls and executes the main method.
teste60.exercicio50.enunExtra       = \ 
teste60.exercicio50.numOpcao        = Select 2 options
teste60.exercicio50.opcao_0         = A - You can start the execution of a Java application through the main method.
teste60.exercicio50.opcao_1         = B - The Java compiler calls and executes the main method.
teste60.exercicio50.opcao_2         = C - The Java Virtual Machine calls and executes the main method.
teste60.exercicio50.opcao_3         = D - A class calls and executes the main method.
teste60.exercicio50.opcao_4         = E - None of the Above.
teste60.exercicio50.questao         = Select the correct options:
teste60.exercicio50.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.07, p.61.
teste60.exercicio51.ajuda.cabecalho = Operators
teste60.exercicio51.ajuda.conteudo  = First of all, whenever you answer any question that uses parentheses to override operator precedence, check whether the number of opening parentheses matches the number of closing parentheses. This code will not compile because the number of opening parentheses does not match the number of closing parentheses.\r\n\r\nSecond, you may not have to answer complex expressions in the real exam. Whenever you see overly complex code, look for other possible issues in the code. Complex code may be used to distract your attention from the real issue.
teste60.exercicio51.enunExtra       = \r\n\r\nint a = 10;\r\nint b = 20;\r\nint c = (a * (b + 2)) - 10-4 * ((2*2) - 6;\r\nSystem.out.println(c);
teste60.exercicio51.numOpcao        = Select 1 option
teste60.exercicio51.opcao_0         = A - 218
teste60.exercicio51.opcao_1         = B - 232
teste60.exercicio51.opcao_2         = C - 246
teste60.exercicio51.opcao_3         = D - Compilation error
teste60.exercicio51.opcao_4         = E - None of the Above.
teste60.exercicio51.questao         = What is the output of the following code?
teste60.exercicio51.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.07, p.103.
teste60.exercicio52.ajuda.cabecalho = Operators
teste60.exercicio52.ajuda.conteudo  = First Tip: Operator % outputs the remainder from a division operation.\r\n\r\nSecond Tip: Java does not define a =+ operator. The correct operator is +=.
teste60.exercicio52.enunExtra       = \r\n\r\npublic class IncrementNum {\r\n\u0009public static void main(String[] args) {\r\n\u0009\u0009int ctr = 50;\r\n\u0009\u0009// INSERT CODE HERE\r\n\u0009\u0009System.out.println(ctr % 20);\r\n\u0009}\r\n}
teste60.exercicio52.opcao_0         = A - ctr += 1;
teste60.exercicio52.opcao_1         = B - ctr =+ 1;
teste60.exercicio52.opcao_2         = C - ++ctr;
teste60.exercicio52.opcao_3         = D - ctr = 1;
teste60.exercicio52.opcao_4         = E - None of the Above.
teste60.exercicio52.questao         = Select the options that, when inserted at // INSERT CODE HERE, will make the following code output a value of 11:
teste60.exercicio52.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.06, p.102.
teste60.exercicio53.ajuda.cabecalho = Create methods with arguments and return values
teste60.exercicio53.ajuda.conteudo  = Tip: Option (c) is incorrect. This method doesn\u2019t accept integers as the method  arguments. The type of the method argument arg3 is double, which isn\u2019t an integer.
teste60.exercicio53.enunExtra       = \ 
teste60.exercicio53.numOpcao        = Select 2 options
teste60.exercicio53.opcao_0         = A - public void addNumbers(byte arg1, int arg2, int arg3) { double sum = arg1 + arg2 + arg3; }
teste60.exercicio53.opcao_1         = B - public double subtractNumbers(byte arg1, int arg2, int arg3) { double sum = arg1 + arg2 + arg3; return sum; }
teste60.exercicio53.opcao_2         = C - public double numbers(long arg1, byte arg2, double arg3) { return arg1 + arg2 + arg3; }
teste60.exercicio53.opcao_3         = D - public float wakaWakaAfrica(long a1, long a2, short a977) { double sum = a1 + a2 + a977; return (float)sum; }
teste60.exercicio53.opcao_4         = E - None of the Above.
teste60.exercicio53.questao         = Which of the following methods correctly accepts three whole numbers as method arguments and returns their sum as a decimal number?
teste60.exercicio53.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.03, p.162.
teste60.exercicio54.ajuda.cabecalho = The switch statement
teste60.exercicio54.ajuda.conteudo  = First Tip: Compile-time constants, including expressions, are permissible in the case labels.\r\n\r\nSecond Tip: The case labels should be compile-time constants. A nonfinal variable isn\u2019t a compile-time constant because it can be reassigned a value during the course of a class\u2019s execution. Although the previous class doesn\u2019t assign a value to it, the compiler still treats it as a changeable variable.
teste60.exercicio54.enunExtra       = \r\n\r\nclass EJavaGuru {\r\n\u0009public static int getVal() {\r\n\u0009\u0009return 100;\r\n\u0009}\r\n\r\n\u0009public static void main(String args[]) {\r\n\u0009\u0009int num = 10;\r\n\u0009\u0009final int num2 = 20;\r\n\u0009\u0009switch (num) {\r\n\u0009\u0009\u0009// INSERT CODE HERE\r\n\u0009\u0009\u0009break;\r\n\u0009\u0009\u0009default: System.out.println("default");\r\n\u0009\u0009}\r\n\u0009}\r\n}
teste60.exercicio54.numOpcao        = Select 3 options
teste60.exercicio54.opcao_0         = A - case 10*3: System.out.println(2);
teste60.exercicio54.opcao_1         = B - case num: System.out.println(3);
teste60.exercicio54.opcao_2         = C - case 10/3: System.out.println(4);
teste60.exercicio54.opcao_3         = D - case num2: System.out.println(5);
teste60.exercicio54.opcao_4         = E - None of the Above.
teste60.exercicio54.questao         = Given the following code, which of the following lines of code can individually replace the //INSERT CODE HERE line so that the code compiles successfully?
teste60.exercicio54.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste60.exercicio55.ajuda.cabecalho = 1
teste60.exercicio55.ajuda.conteudo  = 1
teste60.exercicio55.enunExtra       = 1 
teste60.exercicio55.numOpcao        = Select 1 options
teste60.exercicio55.opcao_0         = A - 
teste60.exercicio55.opcao_1         = B - 
teste60.exercicio55.opcao_2         = C - 
teste60.exercicio55.opcao_3         = D - 
teste60.exercicio55.opcao_4         = E - 
teste60.exercicio55.questao         = 1
teste60.exercicio55.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste60.exercicio56.ajuda.cabecalho = 1
teste60.exercicio56.ajuda.conteudo  = 1
teste60.exercicio56.enunExtra       = 1 
teste60.exercicio56.numOpcao        = Select 1 options
teste60.exercicio56.opcao_0         = A - 
teste60.exercicio56.opcao_1         = B - 
teste60.exercicio56.opcao_2         = C - 
teste60.exercicio56.opcao_3         = D - 
teste60.exercicio56.opcao_4         = E - 
teste60.exercicio56.questao         = 1
teste60.exercicio56.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste60.exercicio57.ajuda.cabecalho = Strings
teste60.exercicio57.ajuda.conteudo  = String objects that are created without using the new operator are placed in a pool of Strings. Hence, the String object referred to by the variable ejg3 is placed in a pool of Strings. The variable ejg4 is also defined without using the new operator.\r\n\r\nBefore Java creates another String object in the String pool for the variable ejg4, it looks for a String object with the same value in the pool. Because this value already exists in the pool, it makes the variable ejg4 refer to the same String object. This,  in turn, makes the variables ejg3 and ejg4 refer to the same String objects. Hence, both of the following comparisons will return true:\r\n\r\n\u25A0 ejg3 == ejg4 (compare the object references)\r\n\u25A0 ejg3.equals(ejg4) (compare the object values)\r\n\r\nEven though the variables ejg1 and ejg2 refer to different String objects, they define the same values. So ejg1.equals(ejg2) also returns true. Because the loop condition (ejg3==ejg4) always returns true, the code prints true in an infinite loop.
teste60.exercicio57.enunExtra       = \ 
teste60.exercicio57.numOpcao        = Select 1 option
teste60.exercicio57.opcao_0         = A - true printed once
teste60.exercicio57.opcao_1         = B - false printed once
teste60.exercicio57.opcao_2         = C - true printed in an infinite loop
teste60.exercicio57.opcao_3         = D - false printed in an infinite loop
teste60.exercicio57.opcao_4         = E - None of the Above.
teste60.exercicio57.questao         = What is the output of the following code?\r\n\r\nclass EJavaGuruString {\r\n\u0009public static void main(String args[]) {\r\n\u0009\u0009String ejg1 = new String("E Java");\r\n\u0009\u0009String ejg2 = new String("E Java");\r\n\u0009\u0009String ejg3 = "E Java";\r\n\u0009\u0009String ejg4 = "E Java";\r\n\u0009\u0009do\r\n\u0009\u0009\u0009System.out.println(ejg1.equals(ejg2));\r\n\u0009\u0009while (ejg3 == ejg4);\r\n\u0009}\r\n}
teste60.exercicio57.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.07, p.234.
teste60.exercicio58.ajuda.cabecalho = StringBuilder
teste60.exercicio58.ajuda.conteudo  = This question tests you on your understanding of operators, String, and StringBuilder. The following line of code returns 12SUN45:\r\n\r\n10 + 2 + "SUN" + 4 + 5\r\n\r\nThe + operator adds two numbers but concatenates the last two numbers. When the + operator encounters a String object, it treats all the remaining operands as String objects. Unlike the String objects, StringBuilder objects are mutable. The append and delete methods defined in this class change its value. ejg.delete(3, 6) modifies the existing value of the StringBuilder to 12S5. It then appends the same value to itself when calling ejg.append(), resulting in the value 12S512S5.
teste60.exercicio58.enunExtra       = \ 
teste60.exercicio58.numOpcao        = Select 1 option
teste60.exercicio58.opcao_0         = A - 12S512S5
teste60.exercicio58.opcao_1         = B - 12S12S
teste60.exercicio58.opcao_2         = C - 1025102S
teste60.exercicio58.opcao_3         = D - Runtime exception
teste60.exercicio58.opcao_4         = E - None of the Above.
teste60.exercicio58.questao         = What is the output of the following code?\r\n\r\nclass EJavaGuruStringBuilder {\r\n\u0009public static void main(String args[]) {\r\n\u0009\u0009StringBuilder ejg = new StringBuilder(10 + 2 + "SUN" + 4 + 5);\r\n\u0009\u0009ejg.append(ejg.delete(3, 6));\r\n\u0009\u0009System.out.println(ejg);\r\n\u0009}\r\n}
teste60.exercicio58.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.10, p.235.
teste60.exercicio59.ajuda.cabecalho = 1
teste60.exercicio59.ajuda.conteudo  = 1
teste60.exercicio59.enunExtra       = 1 
teste60.exercicio59.numOpcao        = Select 1 options
teste60.exercicio59.opcao_0         = A - 
teste60.exercicio59.opcao_1         = B - 
teste60.exercicio59.opcao_2         = C - 
teste60.exercicio59.opcao_3         = D - 
teste60.exercicio59.opcao_4         = E - 
teste60.exercicio59.questao         = 1
teste60.exercicio59.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste60.exercicio6.ajuda.cabecalho  = Create methods with arguments and return values
teste60.exercicio6.ajuda.conteudo   = Tip: There is no constraint on the number of arguments that can be passed on to a method, regardless of whether the method returns a value.
teste60.exercicio6.enunExtra        = \ 
teste60.exercicio6.numOpcao         = Select 4 options
teste60.exercicio6.opcao_0          = A - If the return type of a method is int, the method can return a value of type byte.
teste60.exercicio6.opcao_1          = B - A method may or may not return a value.
teste60.exercicio6.opcao_2          = C - If the return type of a method is void, it can define a return statement without\r\na value, as follows: return;
teste60.exercicio6.opcao_3          = D - A method may or may not accept any method arguments.
teste60.exercicio6.opcao_4          = E - A method must accept at least one method argument or define its return type.
teste60.exercicio6.questao          = Which of the following statements are true?
teste60.exercicio6.referencia       = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.04, p.162.
teste60.exercicio60.ajuda.cabecalho = Java packages
teste60.exercicio60.ajuda.conteudo  = First Tip: To import a package and its members, the package name should be followed by .*, as follows: \r\n\r\nimport com.ejavaguru.*;\r\n\r\nSecond Tip: The path of the imported class used in an import statement isn\u2019t related to the class\u2019s physical location. It reflects the package and subpackage that a class is in.
teste60.exercicio60.enunExtra       = \r\n\r\n// INSERT CODE HERE\r\nclass MyCourse {\r\n\u0009Course c;\r\n}
teste60.exercicio60.numOpcao        = Select 1 option
teste60.exercicio60.opcao_0         = A - import mycode.com.ejavaguru.Course;
teste60.exercicio60.opcao_1         = B - import com.ejavaguru.Course;
teste60.exercicio60.opcao_2         = C - import mycode.com.ejavaguru;
teste60.exercicio60.opcao_3         = D - import com.ejavaguru;
teste60.exercicio60.opcao_4         = E - import mycode.com.ejavaguru*;
teste60.exercicio60.questao         = A class Course is defined in a package com.ejavaguru. Given that the physical location of the corresponding class file is /mycode/com/ejavaguru/Course.class and execution takes place within the mycode directory, which of the following lines of code, when inserted at // INSERT CODE HERE, will import the Course class into the class MyCourse?
teste60.exercicio60.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.08, p.61
teste60.exercicio7.ajuda.cabecalho  = Passing objects and primitives to methods
teste60.exercicio7.ajuda.conteudo   = When primitive data types are passed to a method, the values of the variables in the calling method remain the same. This behavior doesn\u2019t depend on whether the primitive values are reassigned other values or modified by addition, subtraction, or multiplication\u2014or any other operation.
teste60.exercicio7.enunExtra        = \r\n\r\nclass EJavaGuruPassPrim {\r\n\u0009public static void main(String args[]) {\r\n\u0009\u0009int ejg = 10;\r\n\u0009\u0009anotherMethod(ejg);\r\n\u0009\u0009System.out.println(ejg);\r\n\u0009\u0009someMethod(ejg);\r\n\u0009\u0009System.out.println(ejg);\r\n\u0009}\r\n\r\n\u0009static void someMethod(int val) {\r\n\u0009\u0009++val;\r\n\u0009\u0009System.out.println(val);\r\n\u0009}\r\n\r\n\u0009static void anotherMethod(int val) {\r\n\u0009\u0009val = 20;\r\n\u0009\u0009System.out.println(val);\r\n\u0009}\r\n}
teste60.exercicio7.numOpcao         = Select 1 option
teste60.exercicio7.opcao_0          = A - 20  /  10  /  11  /  11
teste60.exercicio7.opcao_1          = B - 20  /  20  /  11  /  10
teste60.exercicio7.opcao_2          = C - 20  /  10  /  11  /  10
teste60.exercicio7.opcao_3          = D - Compilation error
teste60.exercicio7.opcao_4          = E - None of the Above.
teste60.exercicio7.questao          = What is the output of the following code?
teste60.exercicio7.referencia       = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.06, p.163.
teste60.exercicio8.ajuda.cabecalho  = Create an overloaded method
teste60.exercicio8.ajuda.conteudo   = First Tip: Overloaded methods can change the access modifiers, but changing the access modifier alone won\u2019t make it an overloaded method.\r\n\r\nSecond Tip: Overloaded methods can change the return type of the method, but changing the return type won\u2019t make it an overloaded method.
teste60.exercicio8.enunExtra        = \r\n\r\npublic String eJava(int age, String name, double duration)
teste60.exercicio8.numOpcao         = Select 4 options
teste60.exercicio8.opcao_0          = A - private String eJava(int val, String firstName, double dur)
teste60.exercicio8.opcao_1          = B - String eJava()
teste60.exercicio8.opcao_2          = C - String eJava(String name, int age, double duration)
teste60.exercicio8.opcao_3          = D - float eJava(double name, String age, byte duration)
teste60.exercicio8.opcao_4          = E - ArrayList<String> eJava()
teste60.exercicio8.questao          = Given the following signature of method eJava, choose the options that correctly overload this method:
teste60.exercicio8.referencia       = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.07, p.164.
teste60.exercicio9.ajuda.cabecalho  = Passing objects and primitives to methods
teste60.exercicio9.ajuda.conteudo   = No compilation issues exist with the code. You can overload methods by changing the type of the method arguments in the list. Using method arguments with data types having a base-derived class relationship (Object and String classes) is acceptable. Using method arguments with data types for which one can be automatically converted to the other (int and long) is also acceptable.\r\n\r\nWhen the code executes course.enroll(c), char can be passed to two overloaded enroll methods that accept int and long. The char gets expanded to its nearest type\u2014int\u2014so course.enroll(c) calls the overloaded method that accepts int, printing int. The code course.enroll("Object") is passed a String value. Although String is also an Object, this method calls the specific (not general) type of the argument passed to it. So course.enroll("Object") calls the overloaded method that accepts String, printing String.
teste60.exercicio9.enunExtra        = \r\n\r\nwhat is the output of the following code?\r\n\r\nclass EJavaGuru {\r\n\u0009public static void main(String args[]) {\r\n\u0009\u0009Course course = new Course();\r\n\u0009\u0009char c = 10;\r\n\u0009\u0009course.enroll(c);\r\n\u0009\u0009course.enroll("Object");\r\n\u0009}\r\n}
teste60.exercicio9.numOpcao         = Select 1 option
teste60.exercicio9.opcao_0          = A - Compilation error
teste60.exercicio9.opcao_1          = B - Runtime exception
teste60.exercicio9.opcao_2          = C - int  /  String
teste60.exercicio9.opcao_3          = D - long  /  Object
teste60.exercicio9.opcao_4          = E - None of the Above.
teste60.exercicio9.questao          = Given the following code, \r\n\r\nclass Course {\r\n\u0009void enroll(long duration) {\r\n\u0009\u0009System.out.println("long");\r\n\u0009}\r\n\r\n\u0009void enroll(int duration) {\r\n\u0009\u0009System.out.println("int");\r\n\u0009}\r\n\r\n\u0009void enroll(String s) {\r\n\u0009\u0009System.out.println("String");\r\n\u0009}\r\n\r\n\u0009void enroll(Object o) {\r\n\u0009\u0009System.out.println("Object");\r\n\u0009}\r\n}
teste60.exercicio9.referencia       = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.

###############################################################
## TESTE DE 90 QUESTÕES - EXERCÍCIOS.
###############################################################


teste90.exercicio1.ajuda.cabecalho  = 1
teste90.exercicio1.ajuda.conteudo   = 1
teste90.exercicio1.enunExtra        = 1 
teste90.exercicio1.numOpcao         = Select 1 options
teste90.exercicio1.opcao_0          = A - 
teste90.exercicio1.opcao_1          = B - 
teste90.exercicio1.opcao_2          = C - 
teste90.exercicio1.opcao_3          = D - 
teste90.exercicio1.opcao_4          = E - 
teste90.exercicio1.questao          = 1
teste90.exercicio1.referencia       = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio10.ajuda.cabecalho = 1
teste90.exercicio10.ajuda.conteudo  = 1
teste90.exercicio10.enunExtra       = 1 
teste90.exercicio10.numOpcao        = Select 1 options
teste90.exercicio10.opcao_0         = A - 
teste90.exercicio10.opcao_1         = B - 
teste90.exercicio10.opcao_2         = C - 
teste90.exercicio10.opcao_3         = D - 
teste90.exercicio10.opcao_4         = E - 
teste90.exercicio10.questao         = 1
teste90.exercicio10.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio11.ajuda.cabecalho = 1
teste90.exercicio11.ajuda.conteudo  = 1
teste90.exercicio11.enunExtra       = 1 
teste90.exercicio11.numOpcao        = Select 1 options
teste90.exercicio11.opcao_0         = A - 
teste90.exercicio11.opcao_1         = B - 
teste90.exercicio11.opcao_2         = C - 
teste90.exercicio11.opcao_3         = D - 
teste90.exercicio11.opcao_4         = E - 
teste90.exercicio11.questao         = 1
teste90.exercicio11.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio12.ajuda.cabecalho = 1
teste90.exercicio12.ajuda.conteudo  = 1
teste90.exercicio12.enunExtra       = 1 
teste90.exercicio12.numOpcao        = Select 1 options
teste90.exercicio12.opcao_0         = A - 
teste90.exercicio12.opcao_1         = B - 
teste90.exercicio12.opcao_2         = C - 
teste90.exercicio12.opcao_3         = D - 
teste90.exercicio12.opcao_4         = E - 
teste90.exercicio12.questao         = 1
teste90.exercicio12.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio13.ajuda.cabecalho = 1
teste90.exercicio13.ajuda.conteudo  = 1
teste90.exercicio13.enunExtra       = 1 
teste90.exercicio13.numOpcao        = Select 1 options
teste90.exercicio13.opcao_0         = A - 
teste90.exercicio13.opcao_1         = B - 
teste90.exercicio13.opcao_2         = C - 
teste90.exercicio13.opcao_3         = D - 
teste90.exercicio13.opcao_4         = E - 
teste90.exercicio13.questao         = 1
teste90.exercicio13.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio14.ajuda.cabecalho = 1
teste90.exercicio14.ajuda.conteudo  = 1
teste90.exercicio14.enunExtra       = 1 
teste90.exercicio14.numOpcao        = Select 1 options
teste90.exercicio14.opcao_0         = A - 
teste90.exercicio14.opcao_1         = B - 
teste90.exercicio14.opcao_2         = C - 
teste90.exercicio14.opcao_3         = D - 
teste90.exercicio14.opcao_4         = E - 
teste90.exercicio14.questao         = 1
teste90.exercicio14.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio15.ajuda.cabecalho = 1
teste90.exercicio15.ajuda.conteudo  = 1
teste90.exercicio15.enunExtra       = 1 
teste90.exercicio15.numOpcao        = Select 1 options
teste90.exercicio15.opcao_0         = A - 
teste90.exercicio15.opcao_1         = B - 
teste90.exercicio15.opcao_2         = C - 
teste90.exercicio15.opcao_3         = D - 
teste90.exercicio15.opcao_4         = E - 
teste90.exercicio15.questao         = 1
teste90.exercicio15.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio16.ajuda.cabecalho = 1
teste90.exercicio16.ajuda.conteudo  = 1
teste90.exercicio16.enunExtra       = 1 
teste90.exercicio16.numOpcao        = Select 1 options
teste90.exercicio16.opcao_0         = A - 
teste90.exercicio16.opcao_1         = B - 
teste90.exercicio16.opcao_2         = C - 
teste90.exercicio16.opcao_3         = D - 
teste90.exercicio16.opcao_4         = E - 
teste90.exercicio16.questao         = 1
teste90.exercicio16.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio17.ajuda.cabecalho = 1
teste90.exercicio17.ajuda.conteudo  = 1
teste90.exercicio17.enunExtra       = 1 
teste90.exercicio17.numOpcao        = Select 1 options
teste90.exercicio17.opcao_0         = A - 
teste90.exercicio17.opcao_1         = B - 
teste90.exercicio17.opcao_2         = C - 
teste90.exercicio17.opcao_3         = D - 
teste90.exercicio17.opcao_4         = E - 
teste90.exercicio17.questao         = 1
teste90.exercicio17.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio18.ajuda.cabecalho = 1
teste90.exercicio18.ajuda.conteudo  = 1
teste90.exercicio18.enunExtra       = 1 
teste90.exercicio18.numOpcao        = Select 1 options
teste90.exercicio18.opcao_0         = A - 
teste90.exercicio18.opcao_1         = B - 
teste90.exercicio18.opcao_2         = C - 
teste90.exercicio18.opcao_3         = D - 
teste90.exercicio18.opcao_4         = E - 
teste90.exercicio18.questao         = 1
teste90.exercicio18.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio19.ajuda.cabecalho = 1
teste90.exercicio19.ajuda.conteudo  = 1
teste90.exercicio19.enunExtra       = 1 
teste90.exercicio19.numOpcao        = Select 1 options
teste90.exercicio19.opcao_0         = A - 
teste90.exercicio19.opcao_1         = B - 
teste90.exercicio19.opcao_2         = C - 
teste90.exercicio19.opcao_3         = D - 
teste90.exercicio19.opcao_4         = E - 
teste90.exercicio19.questao         = 1
teste90.exercicio19.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio2.ajuda.cabecalho  = 1
teste90.exercicio2.ajuda.conteudo   = 1
teste90.exercicio2.enunExtra        = 1 
teste90.exercicio2.numOpcao         = Select 1 options
teste90.exercicio2.opcao_0          = A - 
teste90.exercicio2.opcao_1          = B - 
teste90.exercicio2.opcao_2          = C - 
teste90.exercicio2.opcao_3          = D - 
teste90.exercicio2.opcao_4          = E - 
teste90.exercicio2.questao          = 1
teste90.exercicio2.referencia       = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio20.ajuda.cabecalho = 1
teste90.exercicio20.ajuda.conteudo  = 1
teste90.exercicio20.enunExtra       = 1 
teste90.exercicio20.numOpcao        = Select 1 options
teste90.exercicio20.opcao_0         = A - 
teste90.exercicio20.opcao_1         = B - 
teste90.exercicio20.opcao_2         = C - 
teste90.exercicio20.opcao_3         = D - 
teste90.exercicio20.opcao_4         = E - 
teste90.exercicio20.questao         = 1
teste90.exercicio20.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio21.ajuda.cabecalho = 1
teste90.exercicio21.ajuda.conteudo  = 1
teste90.exercicio21.enunExtra       = 1 
teste90.exercicio21.numOpcao        = Select 1 options
teste90.exercicio21.opcao_0         = A - 
teste90.exercicio21.opcao_1         = B - 
teste90.exercicio21.opcao_2         = C - 
teste90.exercicio21.opcao_3         = D - 
teste90.exercicio21.opcao_4         = E - 
teste90.exercicio21.questao         = 1
teste90.exercicio21.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio22.ajuda.cabecalho = 1
teste90.exercicio22.ajuda.conteudo  = 1
teste90.exercicio22.enunExtra       = 1 
teste90.exercicio22.numOpcao        = Select 1 options
teste90.exercicio22.opcao_0         = A - 
teste90.exercicio22.opcao_1         = B - 
teste90.exercicio22.opcao_2         = C - 
teste90.exercicio22.opcao_3         = D - 
teste90.exercicio22.opcao_4         = E - 
teste90.exercicio22.questao         = 1
teste90.exercicio22.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio23.ajuda.cabecalho = 1
teste90.exercicio23.ajuda.conteudo  = 1
teste90.exercicio23.enunExtra       = 1 
teste90.exercicio23.numOpcao        = Select 1 options
teste90.exercicio23.opcao_0         = A - 
teste90.exercicio23.opcao_1         = B - 
teste90.exercicio23.opcao_2         = C - 
teste90.exercicio23.opcao_3         = D - 
teste90.exercicio23.opcao_4         = E - 
teste90.exercicio23.questao         = 1
teste90.exercicio23.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio24.ajuda.cabecalho = 1
teste90.exercicio24.ajuda.conteudo  = 1
teste90.exercicio24.enunExtra       = 1 
teste90.exercicio24.numOpcao        = Select 1 options
teste90.exercicio24.opcao_0         = A - 
teste90.exercicio24.opcao_1         = B - 
teste90.exercicio24.opcao_2         = C - 
teste90.exercicio24.opcao_3         = D - 
teste90.exercicio24.opcao_4         = E - 
teste90.exercicio24.questao         = 1
teste90.exercicio24.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio25.ajuda.cabecalho = 1
teste90.exercicio25.ajuda.conteudo  = 1
teste90.exercicio25.enunExtra       = 1 
teste90.exercicio25.numOpcao        = Select 1 options
teste90.exercicio25.opcao_0         = A - 
teste90.exercicio25.opcao_1         = B - 
teste90.exercicio25.opcao_2         = C - 
teste90.exercicio25.opcao_3         = D - 
teste90.exercicio25.opcao_4         = E - 
teste90.exercicio25.questao         = 1
teste90.exercicio25.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio26.ajuda.cabecalho = 1
teste90.exercicio26.ajuda.conteudo  = 1
teste90.exercicio26.enunExtra       = 1 
teste90.exercicio26.numOpcao        = Select 1 options
teste90.exercicio26.opcao_0         = A - 
teste90.exercicio26.opcao_1         = B - 
teste90.exercicio26.opcao_2         = C - 
teste90.exercicio26.opcao_3         = D - 
teste90.exercicio26.opcao_4         = E - 
teste90.exercicio26.questao         = 1
teste90.exercicio26.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio27.ajuda.cabecalho = 1
teste90.exercicio27.ajuda.conteudo  = 1
teste90.exercicio27.enunExtra       = 1 
teste90.exercicio27.numOpcao        = Select 1 options
teste90.exercicio27.opcao_0         = A - 
teste90.exercicio27.opcao_1         = B - 
teste90.exercicio27.opcao_2         = C - 
teste90.exercicio27.opcao_3         = D - 
teste90.exercicio27.opcao_4         = E - 
teste90.exercicio27.questao         = 1
teste90.exercicio27.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio28.ajuda.cabecalho = 1
teste90.exercicio28.ajuda.conteudo  = 1
teste90.exercicio28.enunExtra       = 1 
teste90.exercicio28.numOpcao        = Select 1 options
teste90.exercicio28.opcao_0         = A - 
teste90.exercicio28.opcao_1         = B - 
teste90.exercicio28.opcao_2         = C - 
teste90.exercicio28.opcao_3         = D - 
teste90.exercicio28.opcao_4         = E - 
teste90.exercicio28.questao         = 1
teste90.exercicio28.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio29.ajuda.cabecalho = 1
teste90.exercicio29.ajuda.conteudo  = 1
teste90.exercicio29.enunExtra       = 1 
teste90.exercicio29.numOpcao        = Select 1 options
teste90.exercicio29.opcao_0         = A - 
teste90.exercicio29.opcao_1         = B - 
teste90.exercicio29.opcao_2         = C - 
teste90.exercicio29.opcao_3         = D - 
teste90.exercicio29.opcao_4         = E - 
teste90.exercicio29.questao         = 1
teste90.exercicio29.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio3.ajuda.cabecalho  = 1
teste90.exercicio3.ajuda.conteudo   = 1
teste90.exercicio3.enunExtra        = 1 
teste90.exercicio3.numOpcao         = Select 1 options
teste90.exercicio3.opcao_0          = A - 
teste90.exercicio3.opcao_1          = B - 
teste90.exercicio3.opcao_2          = C - 
teste90.exercicio3.opcao_3          = D - 
teste90.exercicio3.opcao_4          = E - 
teste90.exercicio3.questao          = 1
teste90.exercicio3.referencia       = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio30.ajuda.cabecalho = 1
teste90.exercicio30.ajuda.conteudo  = 1
teste90.exercicio30.enunExtra       = 1 
teste90.exercicio30.numOpcao        = Select 1 options
teste90.exercicio30.opcao_0         = A - 
teste90.exercicio30.opcao_1         = B - 
teste90.exercicio30.opcao_2         = C - 
teste90.exercicio30.opcao_3         = D - 
teste90.exercicio30.opcao_4         = E - 
teste90.exercicio30.questao         = 1
teste90.exercicio30.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio31.ajuda.cabecalho = 1
teste90.exercicio31.ajuda.conteudo  = 1
teste90.exercicio31.enunExtra       = 1 
teste90.exercicio31.numOpcao        = Select 1 options
teste90.exercicio31.opcao_0         = A - 
teste90.exercicio31.opcao_1         = B - 
teste90.exercicio31.opcao_2         = C - 
teste90.exercicio31.opcao_3         = D - 
teste90.exercicio31.opcao_4         = E - 
teste90.exercicio31.questao         = 1
teste90.exercicio31.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio32.ajuda.cabecalho = 1
teste90.exercicio32.ajuda.conteudo  = 1
teste90.exercicio32.enunExtra       = 1 
teste90.exercicio32.numOpcao        = Select 1 options
teste90.exercicio32.opcao_0         = A - 
teste90.exercicio32.opcao_1         = B - 
teste90.exercicio32.opcao_2         = C - 
teste90.exercicio32.opcao_3         = D - 
teste90.exercicio32.opcao_4         = E - 
teste90.exercicio32.questao         = 1
teste90.exercicio32.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio33.ajuda.cabecalho = 1
teste90.exercicio33.ajuda.conteudo  = 1
teste90.exercicio33.enunExtra       = 1 
teste90.exercicio33.numOpcao        = Select 1 options
teste90.exercicio33.opcao_0         = A - 
teste90.exercicio33.opcao_1         = B - 
teste90.exercicio33.opcao_2         = C - 
teste90.exercicio33.opcao_3         = D - 
teste90.exercicio33.opcao_4         = E - 
teste90.exercicio33.questao         = 1
teste90.exercicio33.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio34.ajuda.cabecalho = 1
teste90.exercicio34.ajuda.conteudo  = 1
teste90.exercicio34.enunExtra       = 1 
teste90.exercicio34.numOpcao        = Select 1 options
teste90.exercicio34.opcao_0         = A - 
teste90.exercicio34.opcao_1         = B - 
teste90.exercicio34.opcao_2         = C - 
teste90.exercicio34.opcao_3         = D - 
teste90.exercicio34.opcao_4         = E - 
teste90.exercicio34.questao         = 1
teste90.exercicio34.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio35.ajuda.cabecalho = 1
teste90.exercicio35.ajuda.conteudo  = 1
teste90.exercicio35.enunExtra       = 1 
teste90.exercicio35.numOpcao        = Select 1 options
teste90.exercicio35.opcao_0         = A - 
teste90.exercicio35.opcao_1         = B - 
teste90.exercicio35.opcao_2         = C - 
teste90.exercicio35.opcao_3         = D - 
teste90.exercicio35.opcao_4         = E - 
teste90.exercicio35.questao         = 1
teste90.exercicio35.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio36.ajuda.cabecalho = 1
teste90.exercicio36.ajuda.conteudo  = 1
teste90.exercicio36.enunExtra       = 1 
teste90.exercicio36.numOpcao        = Select 1 options
teste90.exercicio36.opcao_0         = A - 
teste90.exercicio36.opcao_1         = B - 
teste90.exercicio36.opcao_2         = C - 
teste90.exercicio36.opcao_3         = D - 
teste90.exercicio36.opcao_4         = E - 
teste90.exercicio36.questao         = 1
teste90.exercicio36.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio37.ajuda.cabecalho = 1
teste90.exercicio37.ajuda.conteudo  = 1
teste90.exercicio37.enunExtra       = 1 
teste90.exercicio37.numOpcao        = Select 1 options
teste90.exercicio37.opcao_0         = A - 
teste90.exercicio37.opcao_1         = B - 
teste90.exercicio37.opcao_2         = C - 
teste90.exercicio37.opcao_3         = D - 
teste90.exercicio37.opcao_4         = E - 
teste90.exercicio37.questao         = 1
teste90.exercicio37.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio38.ajuda.cabecalho = 1
teste90.exercicio38.ajuda.conteudo  = 1
teste90.exercicio38.enunExtra       = 1 
teste90.exercicio38.numOpcao        = Select 1 options
teste90.exercicio38.opcao_0         = A - 
teste90.exercicio38.opcao_1         = B - 
teste90.exercicio38.opcao_2         = C - 
teste90.exercicio38.opcao_3         = D - 
teste90.exercicio38.opcao_4         = E - 
teste90.exercicio38.questao         = 1
teste90.exercicio38.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio39.ajuda.cabecalho = 1
teste90.exercicio39.ajuda.conteudo  = 1
teste90.exercicio39.enunExtra       = 1 
teste90.exercicio39.numOpcao        = Select 1 options
teste90.exercicio39.opcao_0         = A - 
teste90.exercicio39.opcao_1         = B - 
teste90.exercicio39.opcao_2         = C - 
teste90.exercicio39.opcao_3         = D - 
teste90.exercicio39.opcao_4         = E - 
teste90.exercicio39.questao         = 1
teste90.exercicio39.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio4.ajuda.cabecalho  = 1
teste90.exercicio4.ajuda.conteudo   = 1
teste90.exercicio4.enunExtra        = 1 
teste90.exercicio4.numOpcao         = Select 1 options
teste90.exercicio4.opcao_0          = A - 
teste90.exercicio4.opcao_1          = B - 
teste90.exercicio4.opcao_2          = C - 
teste90.exercicio4.opcao_3          = D - 
teste90.exercicio4.opcao_4          = E - 
teste90.exercicio4.questao          = 1
teste90.exercicio4.referencia       = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio40.ajuda.cabecalho = 1
teste90.exercicio40.ajuda.conteudo  = 1
teste90.exercicio40.enunExtra       = 1 
teste90.exercicio40.numOpcao        = Select 1 options
teste90.exercicio40.opcao_0         = A - 
teste90.exercicio40.opcao_1         = B - 
teste90.exercicio40.opcao_2         = C - 
teste90.exercicio40.opcao_3         = D - 
teste90.exercicio40.opcao_4         = E - 
teste90.exercicio40.questao         = 1
teste90.exercicio40.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio41.ajuda.cabecalho = 1
teste90.exercicio41.ajuda.conteudo  = 1
teste90.exercicio41.enunExtra       = 1 
teste90.exercicio41.numOpcao        = Select 1 options
teste90.exercicio41.opcao_0         = A - 
teste90.exercicio41.opcao_1         = B - 
teste90.exercicio41.opcao_2         = C - 
teste90.exercicio41.opcao_3         = D - 
teste90.exercicio41.opcao_4         = E - 
teste90.exercicio41.questao         = 1
teste90.exercicio41.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio42.ajuda.cabecalho = 1
teste90.exercicio42.ajuda.conteudo  = 1
teste90.exercicio42.enunExtra       = 1 
teste90.exercicio42.numOpcao        = Select 1 options
teste90.exercicio42.opcao_0         = A - 
teste90.exercicio42.opcao_1         = B - 
teste90.exercicio42.opcao_2         = C - 
teste90.exercicio42.opcao_3         = D - 
teste90.exercicio42.opcao_4         = E - 
teste90.exercicio42.questao         = 1
teste90.exercicio42.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio43.ajuda.cabecalho = 1
teste90.exercicio43.ajuda.conteudo  = 1
teste90.exercicio43.enunExtra       = 1 
teste90.exercicio43.numOpcao        = Select 1 options
teste90.exercicio43.opcao_0         = A - 
teste90.exercicio43.opcao_1         = B - 
teste90.exercicio43.opcao_2         = C - 
teste90.exercicio43.opcao_3         = D - 
teste90.exercicio43.opcao_4         = E - 
teste90.exercicio43.questao         = 1
teste90.exercicio43.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio44.ajuda.cabecalho = 1
teste90.exercicio44.ajuda.conteudo  = 1
teste90.exercicio44.enunExtra       = 1 
teste90.exercicio44.numOpcao        = Select 1 options
teste90.exercicio44.opcao_0         = A - 
teste90.exercicio44.opcao_1         = B - 
teste90.exercicio44.opcao_2         = C - 
teste90.exercicio44.opcao_3         = D - 
teste90.exercicio44.opcao_4         = E - 
teste90.exercicio44.questao         = 1
teste90.exercicio44.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio45.ajuda.cabecalho = 1
teste90.exercicio45.ajuda.conteudo  = 1
teste90.exercicio45.enunExtra       = 1 
teste90.exercicio45.numOpcao        = Select 1 options
teste90.exercicio45.opcao_0         = A - 
teste90.exercicio45.opcao_1         = B - 
teste90.exercicio45.opcao_2         = C - 
teste90.exercicio45.opcao_3         = D - 
teste90.exercicio45.opcao_4         = E - 
teste90.exercicio45.questao         = 1
teste90.exercicio45.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio46.ajuda.cabecalho = 1
teste90.exercicio46.ajuda.conteudo  = 1
teste90.exercicio46.enunExtra       = 1 
teste90.exercicio46.numOpcao        = Select 1 options
teste90.exercicio46.opcao_0         = A - 
teste90.exercicio46.opcao_1         = B - 
teste90.exercicio46.opcao_2         = C - 
teste90.exercicio46.opcao_3         = D - 
teste90.exercicio46.opcao_4         = E - 
teste90.exercicio46.questao         = 1
teste90.exercicio46.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio47.ajuda.cabecalho = 1
teste90.exercicio47.ajuda.conteudo  = 1
teste90.exercicio47.enunExtra       = 1 
teste90.exercicio47.numOpcao        = Select 1 options
teste90.exercicio47.opcao_0         = A - 
teste90.exercicio47.opcao_1         = B - 
teste90.exercicio47.opcao_2         = C - 
teste90.exercicio47.opcao_3         = D - 
teste90.exercicio47.opcao_4         = E - 
teste90.exercicio47.questao         = 1
teste90.exercicio47.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio48.ajuda.cabecalho = 1
teste90.exercicio48.ajuda.conteudo  = 1
teste90.exercicio48.enunExtra       = 1 
teste90.exercicio48.numOpcao        = Select 1 options
teste90.exercicio48.opcao_0         = A - 
teste90.exercicio48.opcao_1         = B - 
teste90.exercicio48.opcao_2         = C - 
teste90.exercicio48.opcao_3         = D - 
teste90.exercicio48.opcao_4         = E - 
teste90.exercicio48.questao         = 1
teste90.exercicio48.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio49.ajuda.cabecalho = 1
teste90.exercicio49.ajuda.conteudo  = 1
teste90.exercicio49.enunExtra       = 1 
teste90.exercicio49.numOpcao        = Select 1 options
teste90.exercicio49.opcao_0         = A - 
teste90.exercicio49.opcao_1         = B - 
teste90.exercicio49.opcao_2         = C - 
teste90.exercicio49.opcao_3         = D - 
teste90.exercicio49.opcao_4         = E - 
teste90.exercicio49.questao         = 1
teste90.exercicio49.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio5.ajuda.cabecalho  = 1
teste90.exercicio5.ajuda.conteudo   = 1
teste90.exercicio5.enunExtra        = 1 
teste90.exercicio5.numOpcao         = Select 1 options
teste90.exercicio5.opcao_0          = A - 
teste90.exercicio5.opcao_1          = B - 
teste90.exercicio5.opcao_2          = C - 
teste90.exercicio5.opcao_3          = D - 
teste90.exercicio5.opcao_4          = E - 
teste90.exercicio5.questao          = 1
teste90.exercicio5.referencia       = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio50.ajuda.cabecalho = 1
teste90.exercicio50.ajuda.conteudo  = 1
teste90.exercicio50.enunExtra       = 1 
teste90.exercicio50.numOpcao        = Select 1 options
teste90.exercicio50.opcao_0         = A - 
teste90.exercicio50.opcao_1         = B - 
teste90.exercicio50.opcao_2         = C - 
teste90.exercicio50.opcao_3         = D - 
teste90.exercicio50.opcao_4         = E - 
teste90.exercicio50.questao         = 1
teste90.exercicio50.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio51.ajuda.cabecalho = 1
teste90.exercicio51.ajuda.conteudo  = 1
teste90.exercicio51.enunExtra       = 1 
teste90.exercicio51.numOpcao        = Select 1 options
teste90.exercicio51.opcao_0         = A - 
teste90.exercicio51.opcao_1         = B - 
teste90.exercicio51.opcao_2         = C - 
teste90.exercicio51.opcao_3         = D - 
teste90.exercicio51.opcao_4         = E - 
teste90.exercicio51.questao         = 1
teste90.exercicio51.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio52.ajuda.cabecalho = 1
teste90.exercicio52.ajuda.conteudo  = 1
teste90.exercicio52.enunExtra       = 1 
teste90.exercicio52.opcao_0         = A - 
teste90.exercicio52.opcao_1         = B - 
teste90.exercicio52.opcao_2         = C - 
teste90.exercicio52.opcao_3         = D - 
teste90.exercicio52.opcao_4         = E - 
teste90.exercicio52.questao         = 1
teste90.exercicio52.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio53.ajuda.cabecalho = 1
teste90.exercicio53.ajuda.conteudo  = 1
teste90.exercicio53.enunExtra       = 1 
teste90.exercicio53.numOpcao        = Select 1 options
teste90.exercicio53.opcao_0         = A - 
teste90.exercicio53.opcao_1         = B - 
teste90.exercicio53.opcao_2         = C - 
teste90.exercicio53.opcao_3         = D - 
teste90.exercicio53.opcao_4         = E - 
teste90.exercicio53.questao         = 1
teste90.exercicio53.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio54.ajuda.cabecalho = 1
teste90.exercicio54.ajuda.conteudo  = 1
teste90.exercicio54.enunExtra       = 1 
teste90.exercicio54.numOpcao        = Select 1 options
teste90.exercicio54.opcao_0         = A - 
teste90.exercicio54.opcao_1         = B - 
teste90.exercicio54.opcao_2         = C - 
teste90.exercicio54.opcao_3         = D - 
teste90.exercicio54.opcao_4         = E - 
teste90.exercicio54.questao         = 1
teste90.exercicio54.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio55.ajuda.cabecalho = 1
teste90.exercicio55.ajuda.conteudo  = 1
teste90.exercicio55.enunExtra       = 1 
teste90.exercicio55.numOpcao        = Select 1 options
teste90.exercicio55.opcao_0         = A - 
teste90.exercicio55.opcao_1         = B - 
teste90.exercicio55.opcao_2         = C - 
teste90.exercicio55.opcao_3         = D - 
teste90.exercicio55.opcao_4         = E - 
teste90.exercicio55.questao         = 1
teste90.exercicio55.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio56.ajuda.cabecalho = 1
teste90.exercicio56.ajuda.conteudo  = 1
teste90.exercicio56.enunExtra       = 1 
teste90.exercicio56.numOpcao        = Select 1 options
teste90.exercicio56.opcao_0         = A - 
teste90.exercicio56.opcao_1         = B - 
teste90.exercicio56.opcao_2         = C - 
teste90.exercicio56.opcao_3         = D - 
teste90.exercicio56.opcao_4         = E - 
teste90.exercicio56.questao         = 1
teste90.exercicio56.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio57.ajuda.cabecalho = 1
teste90.exercicio57.ajuda.conteudo  = 1
teste90.exercicio57.enunExtra       = 1 
teste90.exercicio57.numOpcao        = Select 1 options
teste90.exercicio57.opcao_0         = A - 
teste90.exercicio57.opcao_1         = B - 
teste90.exercicio57.opcao_2         = C - 
teste90.exercicio57.opcao_3         = D - 
teste90.exercicio57.opcao_4         = E - 
teste90.exercicio57.questao         = 1
teste90.exercicio57.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio58.ajuda.cabecalho = 1
teste90.exercicio58.ajuda.conteudo  = 1
teste90.exercicio58.enunExtra       = 1 
teste90.exercicio58.numOpcao        = Select 1 options
teste90.exercicio58.opcao_0         = A - 
teste90.exercicio58.opcao_1         = B - 
teste90.exercicio58.opcao_2         = C - 
teste90.exercicio58.opcao_3         = D - 
teste90.exercicio58.opcao_4         = E - 
teste90.exercicio58.questao         = 1
teste90.exercicio58.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio59.ajuda.cabecalho = 1
teste90.exercicio59.ajuda.conteudo  = 1
teste90.exercicio59.enunExtra       = 1 
teste90.exercicio59.numOpcao        = Select 1 options
teste90.exercicio59.opcao_0         = A - 
teste90.exercicio59.opcao_1         = B - 
teste90.exercicio59.opcao_2         = C - 
teste90.exercicio59.opcao_3         = D - 
teste90.exercicio59.opcao_4         = E - 
teste90.exercicio59.questao         = 1
teste90.exercicio59.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio6.ajuda.cabecalho  = 1
teste90.exercicio6.ajuda.conteudo   = 1
teste90.exercicio6.enunExtra        = 1 
teste90.exercicio6.numOpcao         = Select 1 options
teste90.exercicio6.opcao_0          = A - 
teste90.exercicio6.opcao_1          = B - 
teste90.exercicio6.opcao_2          = C - 
teste90.exercicio6.opcao_3          = D - 
teste90.exercicio6.opcao_4          = E - 
teste90.exercicio6.questao          = 1
teste90.exercicio6.referencia       = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio60.ajuda.cabecalho = 1
teste90.exercicio60.ajuda.conteudo  = 1
teste90.exercicio60.enunExtra       = 1 
teste90.exercicio60.numOpcao        = Select 1 options
teste90.exercicio60.opcao_0         = A - 
teste90.exercicio60.opcao_1         = B - 
teste90.exercicio60.opcao_2         = C - 
teste90.exercicio60.opcao_3         = D - 
teste90.exercicio60.opcao_4         = E - 
teste90.exercicio60.questao         = 1
teste90.exercicio60.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio61.ajuda.cabecalho = 1
teste90.exercicio61.ajuda.conteudo  = 1
teste90.exercicio61.enunExtra       = 1 
teste90.exercicio61.numOpcao        = Select 1 options
teste90.exercicio61.opcao_0         = A - 
teste90.exercicio61.opcao_1         = B - 
teste90.exercicio61.opcao_2         = C - 
teste90.exercicio61.opcao_3         = D - 
teste90.exercicio61.opcao_4         = E - 
teste90.exercicio61.questao         = 1
teste90.exercicio61.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio62.ajuda.cabecalho = 1
teste90.exercicio62.ajuda.conteudo  = 1
teste90.exercicio62.enunExtra       = 1 
teste90.exercicio62.opcao_0         = A - 
teste90.exercicio62.opcao_1         = B - 
teste90.exercicio62.opcao_2         = C - 
teste90.exercicio62.opcao_3         = D - 
teste90.exercicio62.opcao_4         = E - 
teste90.exercicio62.questao         = 1
teste90.exercicio62.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio63.ajuda.cabecalho = 1
teste90.exercicio63.ajuda.conteudo  = 1
teste90.exercicio63.enunExtra       = 1 
teste90.exercicio63.numOpcao        = Select 1 options
teste90.exercicio63.opcao_0         = A - 
teste90.exercicio63.opcao_1         = B - 
teste90.exercicio63.opcao_2         = C - 
teste90.exercicio63.opcao_3         = D - 
teste90.exercicio63.opcao_4         = E - 
teste90.exercicio63.questao         = 1
teste90.exercicio63.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio64.ajuda.cabecalho = 1
teste90.exercicio64.ajuda.conteudo  = 1
teste90.exercicio64.enunExtra       = 1 
teste90.exercicio64.numOpcao        = Select 1 options
teste90.exercicio64.opcao_0         = A - 
teste90.exercicio64.opcao_1         = B - 
teste90.exercicio64.opcao_2         = C - 
teste90.exercicio64.opcao_3         = D - 
teste90.exercicio64.opcao_4         = E - 
teste90.exercicio64.questao         = 1
teste90.exercicio64.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio65.ajuda.cabecalho = 1
teste90.exercicio65.ajuda.conteudo  = 1
teste90.exercicio65.enunExtra       = 1 
teste90.exercicio65.numOpcao        = Select 1 options
teste90.exercicio65.opcao_0         = A - 
teste90.exercicio65.opcao_1         = B - 
teste90.exercicio65.opcao_2         = C - 
teste90.exercicio65.opcao_3         = D - 
teste90.exercicio65.opcao_4         = E - 
teste90.exercicio65.questao         = 1
teste90.exercicio65.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio66.ajuda.cabecalho = 1
teste90.exercicio66.ajuda.conteudo  = 1
teste90.exercicio66.enunExtra       = 1 
teste90.exercicio66.numOpcao        = Select 1 options
teste90.exercicio66.opcao_0         = A - 
teste90.exercicio66.opcao_1         = B - 
teste90.exercicio66.opcao_2         = C - 
teste90.exercicio66.opcao_3         = D - 
teste90.exercicio66.opcao_4         = E - 
teste90.exercicio66.questao         = 1
teste90.exercicio66.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio67.ajuda.cabecalho = 1
teste90.exercicio67.ajuda.conteudo  = 1
teste90.exercicio67.enunExtra       = 1 
teste90.exercicio67.numOpcao        = Select 1 options
teste90.exercicio67.opcao_0         = A - 
teste90.exercicio67.opcao_1         = B - 
teste90.exercicio67.opcao_2         = C - 
teste90.exercicio67.opcao_3         = D - 
teste90.exercicio67.opcao_4         = E - 
teste90.exercicio67.questao         = 1
teste90.exercicio67.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio68.ajuda.cabecalho = 1
teste90.exercicio68.ajuda.conteudo  = 1
teste90.exercicio68.enunExtra       = 1 
teste90.exercicio68.numOpcao        = Select 1 options
teste90.exercicio68.opcao_0         = A - 
teste90.exercicio68.opcao_1         = B - 
teste90.exercicio68.opcao_2         = C - 
teste90.exercicio68.opcao_3         = D - 
teste90.exercicio68.opcao_4         = E - 
teste90.exercicio68.questao         = 1
teste90.exercicio68.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio69.ajuda.cabecalho = 1
teste90.exercicio69.ajuda.conteudo  = 1
teste90.exercicio69.enunExtra       = 1 
teste90.exercicio69.numOpcao        = Select 1 options
teste90.exercicio69.opcao_0         = A - 
teste90.exercicio69.opcao_1         = B - 
teste90.exercicio69.opcao_2         = C - 
teste90.exercicio69.opcao_3         = D - 
teste90.exercicio69.opcao_4         = E - 
teste90.exercicio69.questao         = 1
teste90.exercicio69.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio7.ajuda.cabecalho  = 1
teste90.exercicio7.ajuda.conteudo   = 1
teste90.exercicio7.enunExtra        = 1 
teste90.exercicio7.numOpcao         = Select 1 options
teste90.exercicio7.opcao_0          = A - 
teste90.exercicio7.opcao_1          = B - 
teste90.exercicio7.opcao_2          = C - 
teste90.exercicio7.opcao_3          = D - 
teste90.exercicio7.opcao_4          = E - 
teste90.exercicio7.questao          = 1
teste90.exercicio7.referencia       = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio70.ajuda.cabecalho = 1
teste90.exercicio70.ajuda.conteudo  = 1
teste90.exercicio70.enunExtra       = 1 
teste90.exercicio70.numOpcao        = Select 1 options
teste90.exercicio70.opcao_0         = A - 
teste90.exercicio70.opcao_1         = B - 
teste90.exercicio70.opcao_2         = C - 
teste90.exercicio70.opcao_3         = D - 
teste90.exercicio70.opcao_4         = E - 
teste90.exercicio70.questao         = 1
teste90.exercicio70.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio71.ajuda.cabecalho = 1
teste90.exercicio71.ajuda.conteudo  = 1
teste90.exercicio71.enunExtra       = 1 
teste90.exercicio71.numOpcao        = Select 1 options
teste90.exercicio71.opcao_0         = A - 
teste90.exercicio71.opcao_1         = B - 
teste90.exercicio71.opcao_2         = C - 
teste90.exercicio71.opcao_3         = D - 
teste90.exercicio71.opcao_4         = E - 
teste90.exercicio71.questao         = 1
teste90.exercicio71.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio72.ajuda.cabecalho = 1
teste90.exercicio72.ajuda.conteudo  = 1
teste90.exercicio72.enunExtra       = 1 
teste90.exercicio72.opcao_0         = A - 
teste90.exercicio72.opcao_1         = B - 
teste90.exercicio72.opcao_2         = C - 
teste90.exercicio72.opcao_3         = D - 
teste90.exercicio72.opcao_4         = E - 
teste90.exercicio72.questao         = 1
teste90.exercicio72.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio73.ajuda.cabecalho = 1
teste90.exercicio73.ajuda.conteudo  = 1
teste90.exercicio73.enunExtra       = 1 
teste90.exercicio73.numOpcao        = Select 1 options
teste90.exercicio73.opcao_0         = A - 
teste90.exercicio73.opcao_1         = B - 
teste90.exercicio73.opcao_2         = C - 
teste90.exercicio73.opcao_3         = D - 
teste90.exercicio73.opcao_4         = E - 
teste90.exercicio73.questao         = 1
teste90.exercicio73.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio74.ajuda.cabecalho = 1
teste90.exercicio74.ajuda.conteudo  = 1
teste90.exercicio74.enunExtra       = 1 
teste90.exercicio74.numOpcao        = Select 1 options
teste90.exercicio74.opcao_0         = A - 
teste90.exercicio74.opcao_1         = B - 
teste90.exercicio74.opcao_2         = C - 
teste90.exercicio74.opcao_3         = D - 
teste90.exercicio74.opcao_4         = E - 
teste90.exercicio74.questao         = 1
teste90.exercicio74.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio75.ajuda.cabecalho = 1
teste90.exercicio75.ajuda.conteudo  = 1
teste90.exercicio75.enunExtra       = 1 
teste90.exercicio75.numOpcao        = Select 1 options
teste90.exercicio75.opcao_0         = A - 
teste90.exercicio75.opcao_1         = B - 
teste90.exercicio75.opcao_2         = C - 
teste90.exercicio75.opcao_3         = D - 
teste90.exercicio75.opcao_4         = E - 
teste90.exercicio75.questao         = 1
teste90.exercicio75.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio76.ajuda.cabecalho = 1
teste90.exercicio76.ajuda.conteudo  = 1
teste90.exercicio76.enunExtra       = 1 
teste90.exercicio76.numOpcao        = Select 1 options
teste90.exercicio76.opcao_0         = A - 
teste90.exercicio76.opcao_1         = B - 
teste90.exercicio76.opcao_2         = C - 
teste90.exercicio76.opcao_3         = D - 
teste90.exercicio76.opcao_4         = E - 
teste90.exercicio76.questao         = 1
teste90.exercicio76.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio77.ajuda.cabecalho = 1
teste90.exercicio77.ajuda.conteudo  = 1
teste90.exercicio77.enunExtra       = 1 
teste90.exercicio77.numOpcao        = Select 1 options
teste90.exercicio77.opcao_0         = A - 
teste90.exercicio77.opcao_1         = B - 
teste90.exercicio77.opcao_2         = C - 
teste90.exercicio77.opcao_3         = D - 
teste90.exercicio77.opcao_4         = E - 
teste90.exercicio77.questao         = 1
teste90.exercicio77.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio78.ajuda.cabecalho = 1
teste90.exercicio78.enunExtra       = 1 
teste90.exercicio78.numOpcao        = Select 1 options
teste90.exercicio78.opcao_0         = A - 
teste90.exercicio78.opcao_1         = B - 
teste90.exercicio78.opcao_2         = C - 
teste90.exercicio78.opcao_3         = D - 
teste90.exercicio78.opcao_4         = E - 
teste90.exercicio78.questao         = 1
teste90.exercicio78.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio79.ajuda.cabecalho = 1
teste90.exercicio79.ajuda.conteudo  = 1
teste90.exercicio79.enunExtra       = 1 
teste90.exercicio79.numOpcao        = Select 1 options
teste90.exercicio79.opcao_0         = A - 
teste90.exercicio79.opcao_1         = B - 
teste90.exercicio79.opcao_2         = C - 
teste90.exercicio79.opcao_3         = D - 
teste90.exercicio79.opcao_4         = E - 
teste90.exercicio79.questao         = 1
teste90.exercicio79.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio8.ajuda.cabecalho  = 1
teste90.exercicio8.ajuda.conteudo   = 1
teste90.exercicio8.enunExtra        = 1 
teste90.exercicio8.numOpcao         = Select 1 options
teste90.exercicio8.opcao_0          = A - 
teste90.exercicio8.opcao_1          = B - 
teste90.exercicio8.opcao_2          = C - 
teste90.exercicio8.opcao_3          = D - 
teste90.exercicio8.opcao_4          = E - 
teste90.exercicio8.questao          = 1
teste90.exercicio8.referencia       = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio80.ajuda.cabecalho = 1
teste90.exercicio80.ajuda.conteudo  = 1
teste90.exercicio80.enunExtra       = 1 
teste90.exercicio80.numOpcao        = Select 1 options
teste90.exercicio80.opcao_0         = A - 
teste90.exercicio80.opcao_1         = B - 
teste90.exercicio80.opcao_2         = C - 
teste90.exercicio80.opcao_3         = D - 
teste90.exercicio80.opcao_4         = E - 
teste90.exercicio80.questao         = 1
teste90.exercicio80.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio81.ajuda.cabecalho = 1
teste90.exercicio81.ajuda.conteudo  = 1
teste90.exercicio81.enunExtra       = 1 
teste90.exercicio81.numOpcao        = Select 1 options
teste90.exercicio81.opcao_0         = A - 
teste90.exercicio81.opcao_1         = B - 
teste90.exercicio81.opcao_2         = C - 
teste90.exercicio81.opcao_3         = D - 
teste90.exercicio81.opcao_4         = E - 
teste90.exercicio81.questao         = 1
teste90.exercicio81.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio82.ajuda.cabecalho = 1
teste90.exercicio82.ajuda.conteudo  = 1
teste90.exercicio82.enunExtra       = 1 
teste90.exercicio82.numOpcao        = Select 1 options
teste90.exercicio82.opcao_0         = A - 
teste90.exercicio82.opcao_1         = B - 
teste90.exercicio82.opcao_2         = C - 
teste90.exercicio82.opcao_3         = D - 
teste90.exercicio82.opcao_4         = E - 
teste90.exercicio82.questao         = 1
teste90.exercicio82.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio83.ajuda.cabecalho = 1
teste90.exercicio83.ajuda.conteudo  = 1
teste90.exercicio83.enunExtra       = 1 
teste90.exercicio83.numOpcao        = Select 1 options
teste90.exercicio83.opcao_0         = A - 
teste90.exercicio83.opcao_1         = B - 
teste90.exercicio83.opcao_2         = C - 
teste90.exercicio83.opcao_3         = D - 
teste90.exercicio83.opcao_4         = E - 
teste90.exercicio83.questao         = 1
teste90.exercicio83.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio84.ajuda.cabecalho = 1
teste90.exercicio84.ajuda.conteudo  = 1
teste90.exercicio84.enunExtra       = 1 
teste90.exercicio84.numOpcao        = Select 1 options
teste90.exercicio84.opcao_0         = A - 
teste90.exercicio84.opcao_1         = B - 
teste90.exercicio84.opcao_2         = C - 
teste90.exercicio84.opcao_3         = D - 
teste90.exercicio84.opcao_4         = E - 
teste90.exercicio84.questao         = 1
teste90.exercicio84.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio85.ajuda.cabecalho = 1
teste90.exercicio85.ajuda.conteudo  = 1
teste90.exercicio85.enunExtra       = 1 
teste90.exercicio85.numOpcao        = Select 1 options
teste90.exercicio85.opcao_0         = A - 
teste90.exercicio85.opcao_1         = B - 
teste90.exercicio85.opcao_2         = C - 
teste90.exercicio85.opcao_3         = D - 
teste90.exercicio85.opcao_4         = E - 
teste90.exercicio85.questao         = 1
teste90.exercicio85.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio86.ajuda.cabecalho = 1
teste90.exercicio86.ajuda.conteudo  = 1
teste90.exercicio86.enunExtra       = 1 
teste90.exercicio86.numOpcao        = Select 1 options
teste90.exercicio86.opcao_0         = A - 
teste90.exercicio86.opcao_1         = B - 
teste90.exercicio86.opcao_2         = C - 
teste90.exercicio86.opcao_3         = D - 
teste90.exercicio86.opcao_4         = E - 
teste90.exercicio86.questao         = 1
teste90.exercicio86.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio87.ajuda.cabecalho = 1
teste90.exercicio87.ajuda.conteudo  = 1
teste90.exercicio87.enunExtra       = 1 
teste90.exercicio87.numOpcao        = Select 1 options
teste90.exercicio87.opcao_0         = A - 
teste90.exercicio87.opcao_1         = B - 
teste90.exercicio87.opcao_2         = C - 
teste90.exercicio87.opcao_3         = D - 
teste90.exercicio87.opcao_4         = E - 
teste90.exercicio87.questao         = 1
teste90.exercicio87.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio88.ajuda.cabecalho = 1
teste90.exercicio88.ajuda.conteudo  = 1
teste90.exercicio88.enunExtra       = 1 
teste90.exercicio88.numOpcao        = Select 1 options
teste90.exercicio88.opcao_0         = A - 
teste90.exercicio88.opcao_1         = B - 
teste90.exercicio88.opcao_2         = C - 
teste90.exercicio88.opcao_3         = D - 
teste90.exercicio88.opcao_4         = E - 
teste90.exercicio88.questao         = 1
teste90.exercicio88.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio89.ajuda.cabecalho = 1
teste90.exercicio89.ajuda.conteudo  = 1
teste90.exercicio89.enunExtra       = 1 
teste90.exercicio89.numOpcao        = Select 1 options
teste90.exercicio89.opcao_0         = A - 
teste90.exercicio89.opcao_1         = B - 
teste90.exercicio89.opcao_2         = C - 
teste90.exercicio89.opcao_3         = D - 
teste90.exercicio89.opcao_4         = E - 
teste90.exercicio89.questao         = 1
teste90.exercicio89.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio9.ajuda.cabecalho  = 1
teste90.exercicio9.ajuda.conteudo   = 1
teste90.exercicio9.enunExtra        = 1 
teste90.exercicio9.numOpcao         = Select 1 options
teste90.exercicio9.opcao_0          = A - 
teste90.exercicio9.opcao_1          = B - 
teste90.exercicio9.opcao_2          = C - 
teste90.exercicio9.opcao_3          = D - 
teste90.exercicio9.opcao_4          = E - 
teste90.exercicio9.questao          = 1
teste90.exercicio9.referencia       = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85.
teste90.exercicio90.ajuda.cabecalho = 1
teste90.exercicio90.ajuda.conteudo  = 1
teste90.exercicio90.enunExtra       = 1 
teste90.exercicio90.numOpcao        = Select 1 options
teste90.exercicio90.opcao_0         = A - 
teste90.exercicio90.opcao_1         = B - 
teste90.exercicio90.opcao_2         = C - 
teste90.exercicio90.opcao_3         = D - 
teste90.exercicio90.opcao_4         = E - 
teste90.exercicio90.questao         = 1
teste90.exercicio90.referencia      = GUPTA, Mala. OCA Java SE 7 Programmer I Certification Guide. 1.ed. EUA, q.01, p.85;
